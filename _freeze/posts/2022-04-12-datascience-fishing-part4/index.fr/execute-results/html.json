{
  "hash": "d43abc96374f223e59dcf034384392c8",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"R et Shiny peuvent-ils faire de moi un meilleur pêcheur ? Partie 4\"\nsubtitle: \"Analyse exploratoire de mes données (shiny et plotly)\"\nauthor: \"Aurélien Callens\"\ndate: \"2022-04-12\"\nlang: fr\nimage: images/seabass_bay.jpg\nexecute:\n  eval: false\ncategories:\n  - R\n  - Shiny\n  - EDA\n---\n\n\nDans ce post, j'explore les données que j'ai collectées au cours de l'année dernière avec la version mise à jour de l'application (présentée [ici](/2021/06/01/r-shiny-fishing-part3/)). Cette rapide analyse exploratoire est réalisée avec deux packages que j'apprécie particulièrement : *Plotly* et *shiny*.\n\nPour rappel, ma nouvelle application stocke les données dans trois fichiers csv. Le premier contient les variables liées aux conditions de pêche. Le deuxième contient des informations sur mes prises et enfin le troisième contient des informations sur les caractéristiques des leurres que j'ai utilisés pendant la session.\n\n## Shiny pour explorer les données de pêche par session\n\nJ'ai codé une petite application shiny qui fournit un résumé des conditions de marée et de débit de la rivière, des changements de leurres et des prises pour chaque session. N'hésitez pas à explorer mes données de pêche !\n\n\n<div class=\"wrap\" style=\"width: 100%; height: 1500px;\n    padding: 0; overflow: hidden;\">\n<iframe style='width: 800px;\n    height: 1550px;\n    border: 0;\n    -ms-transform: scale(0.25);\n    -moz-transform: scale(0.25);\n    -o-transform: scale(0.25);\n    -webkit-transform: scale(0.25);\n    transform: scale(0.95);\n    -ms-transform-origin: 0 0;\n    -moz-transform-origin: 0 0;\n    -o-transform-origin: 0 0;\n    -webkit-transform-origin: 0 0;\n    transform-origin: 0 0;' src=\"https://aureliencallens.shinyapps.io/Fishing_analysis/\"> </iframe>\n</div>\n\n## Code de l'application shiny\n\nVoici le code des graphiques plotly dans l'application :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(plotly)\nlibrary(tidyverse)\n\n\n#' For the tide plot\n#' \n#' @param dat first dataframe with session characteristics\n#' @param n_ses the id (number) of the session\n#' @param temporal_range number of hours to display (before and after the session)\n#' @return A plotly object\nplot_tide_ses <- function(dat, n_ses, temporal_range = 4){\n\n  dat_t <- dat %>% \n    filter(Session == n_ses) %>% \n    mutate(Tide_ts = list(eval(parse(text = Ts_tide))))\n  dat_tide <- as.data.frame(dat_t$Tide_ts)\n  dat_tide$hour <- as.POSIXct(dat_tide$hour, origin = \"1970-01-01\")\n  dat_tide$Water <- as.numeric(as.character(dat_tide$Water))\n  \n  plot_ly(data = dat_tide, \n          x = ~ hour, \n          y = ~ Water, \n          mode = 'lines') %>%  \n    layout(shapes = list(\n      list(type = 'line',\n           x0 = as.POSIXct(dat_t$Beg),\n           x1 = as.POSIXct(dat_t$Beg),\n           y0 = min(dat_tide$Water),\n           y1 = max(dat_tide$Water),\n           line = list(dash = 'dot', width = 1)),\n      list(type = 'line',\n           x0 =  as.POSIXct(dat_t$End),\n           x1 = as.POSIXct(dat_t$End),\n           y0 = min(dat_tide$Water),\n           y1 = max(dat_tide$Water),\n           line = list(dash = 'dot', width = 1))),\n      xaxis = list(range = as.POSIXct(c(as.POSIXct(dat_t$Beg) - 3600*temporal_range ,\n                                        as.POSIXct(dat_t$End) + 3600*temporal_range )),\n                   title = \"\"),\n      yaxis = list(title = \"Tide level\"))\n}\n\n#' For the river flow plot\n#' \n#' @param dat first dataframe with session characteristics\n#' @param n_ses the id (number) of the session\n#' @param past_days number of previous to display (before the session)\n#' @return A plotly object\nplot_flow_ses <- function(dat, n_ses, past_days = 4){\n  dat_t <- dat %>% \n    filter(Session == n_ses) %>% \n    mutate(Flow_ts = list(eval(parse(text = Ts_flow))))\n  \n  dat_flow <- as.data.frame(dat_t$Flow_ts)\n  dat_flow$Date <- as.POSIXct(dat_flow$Date, origin = \"1970-01-01\")\n  dat_flow$Nive <- as.numeric(as.character(dat_flow$Nive))\n  dat_flow$Adour <- as.numeric(as.character(dat_flow$Adour))\n  \n  \n  dat_flow <- dat_flow %>% \n    pivot_longer(cols = c(Nive, Adour), \n                 names_to = \"River\",\n                 values_to = \"Flow\")\n  \n  plot_ly(data = dat_flow, \n          x = ~ Date,\n          y = ~ Flow, \n          color = ~ River, \n          mode = 'lines') %>%  \n    layout(shapes = list(\n      list(type='line',\n           x0 = as.POSIXct(dat_t$Beg),\n           x1 = as.POSIXct(dat_t$Beg),\n           y0 = min(dat_flow$Flow),\n           y1 = max(dat_flow$Flow),\n           line = list(dash = 'dot', width = 1))),\n      xaxis = list(range = as.POSIXct(c(as.POSIXct(dat_t$Beg) - 3600*24*past_days,\n                                        as.POSIXct(dat_t$End) )),\n                   title = \"\"))\n}\n\n#' Function to prepare the dataset for the plot of lure change and catch\n#' \n#' @param lure third dataframe with lure changes (hours) and characteristics\n#' @param session first dataframe with session characteristics\n#' @param ses_n the id (number) of the session\n#' @return A dataframe\nstart_end_fonction <- function(lure, session, ses_n){\n  dat_ses <- session %>% \n    filter(Session == ses_n)\n  \n  dat_lure <- lure %>% \n    filter(n_ses == ses_n)\n  \n  startdates <- dat_lure$time\n  enddates <- c(startdates[-1], dat_ses$End)\n  \n  data.frame(change = length(startdates):1, \n             start = as.POSIXct(startdates),\n             end = as.POSIXct(enddates),\n             type = dat_lure$type_lure,\n             text = paste(dat_lure$color_lure, dat_lure$length_lure))\n}\n\n#' For the plot of lure change and catch\n#' \n#' @param lure third dataframe with lure changes (hours) and characteristics\n#' @param caught second dataframe with fish caught characteristics\n#' @param session first dataframe with session characteristics\n#' @param n_ses the id (number) of the session\n#' @return A plotly object\nlure_change <- function(lure, caught, dat, n_ses){\n  \n  df <- start_end_fonction(lure, dat, n_ses)\n  \n  catch <- caught %>% \n    filter(n_ses == n_ses)\n  \n  dat_t <- dat %>% \n    filter(Session == n_ses) %>% \n    mutate(Tide_ts = list(eval(parse(text = Ts_tide))))\n  dat_tide <- as.data.frame(dat_t$Tide_ts)\n  dat_tide$hour <- as.POSIXct(dat_tide$hour, origin = \"1970-01-01\")\n  dat_tide$Water <- as.numeric(as.character(dat_tide$Water))\n  \n  plot_ly() %>% \n    add_segments(data = df,\n                 x = ~ start,\n                 xend = ~ end,\n                 y = ~ change,\n                 yend = ~ change,\n                 color = ~ type,\n                 #text = ~ text,\n                 size = I(5),\n                 alpha = 0.8) %>%\n    add_segments(x = as.POSIXct(catch$time),\n                 xend = as.POSIXct(catch$time),\n                 y = min(df$change),\n                 yend = max(df$change),\n                 line = list(color = \"red\", dash = \"dash\"),\n                 name = 'Fish caught') %>%\n    add_trace(data = dat_tide, \n              x = ~ hour, \n              y = ~ Water, \n              mode = 'lines', \n              yaxis = \"y2\",\n              name = \"Water level\",\n              alpha = 0.4,\n              hoverinfo = 'skip'\n    ) %>% \n    layout(xaxis = list(range = c(df$start[1] - 1000 , df$end[nrow(df)] + 1000),\n                        title = \"\"),\n           yaxis = list(title = \"\", zeroline = FALSE, showline = FALSE,\n                        showticklabels = FALSE, showgrid = FALSE ),\n           yaxis2 = list(overlaying = \"y\", side = \"right\"))\n}\n```\n:::\n\n\nVoici le code de cette application :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\nlibrary(shinyWidgets)\nlibrary(shinydashboard)\nlibrary(plotly)\nlibrary(tidyverse)\nsource('plot_functions.R')\ndat <- read_csv(\"session1.csv\")\ncaught <- read_csv(\"catch1.csv\")\nlure <- read_csv(\"lure.csv\")\n\n# In order to save the tide and flow time series I parse the data in the dataframe\n# The following line is used to transform the parsed text into usable values\ndat_t <- dat %>% \n  mutate(Tide_ts = list(eval(parse(text = Ts_tide))),\n         Flow_ts = list(eval(parse(text = Ts_flow))))\n\nbody <- dashboardBody(fluidPage(\n  # Application title\n  h1(\"Exploratory analysis of fishing data\",\n  align = \"center\",\n  style = \"padding: 40px;  text-align: center;  background: #605ca8;  color: white;  font-size: 40px;\"),\n  br(),\n  # Dropdown menu to select the fishing session\n  fluidRow(align = \"center\",\n           pickerInput(inputId = 'Ses',\n                       label = h3('Select a fishing session:'),\n                       choices = unique(dat$Session[-1]),\n                       options = list(\n                         style = \"btn-primary\"),\n                       choicesOpt = list(\n                         style = rep_len(\"font-size: 75%; line-height: 1.6;\", 4)\n                       ))),\n  br(),\n  br(),\n  # Key figures of the session\n  fluidRow(\n    valueBoxOutput(\"progressD\", width = 4),\n    valueBoxOutput(\"progressF\", width = 4),\n    valueBoxOutput(\"progressL\", width = 4)),\n  br(),\n  \n  br(),\n  # Graphs of the tide and river flow of recent days\n  fluidRow(\n    box(title = \"Tidal water level\", status = \"primary\", \n        plotlyOutput(\"TidePlot\"), width = 6),\n    box(title = \"River flow\", status = \"primary\",\n        plotlyOutput(\"FlowPlot\"), width = 6)),\n  br(),\n  # Graph lure changes during the session + catch\n  fluidRow(\n    box(title = \"Lures tested and fish capture\", status = \"warning\", \n        plotlyOutput(\"LurePlot\"), width=12))\n))\n\nui <- dashboardPage(\n  \n  dashboardHeader(disable = TRUE),\n  \n  dashboardSidebar(disable = TRUE),\n  \n  body\n)\n\n\n# Define server logic required to draw a histogram\nserver <- function(input, output) {\n  \n  # Duration\n  output$progressD <- renderValueBox({\n    Duration = as.integer(difftime(as.POSIXct(dat$End[dat$Session == input$Ses]), as.POSIXct(dat$Beg[dat$Session == input$Ses]), units = 'mins'))\n    valueBox(tags$p(\"Duration\", style = \"font-size: 80%;\"),\n             tags$p(paste(Duration, \"min\"), style = \"font-size: 150%; font-weight: bold;\"),\n             icon = icon(\"clock\"), color = \"purple\")\n  })\n  \n  # Number of fish\n  \n  output$progressF <- renderValueBox({\n    fish_caught = as.integer(caught %>% filter(n_ses == input$Ses) %>% nrow())\n    valueBox(tags$p(\"Fish caught\", style = \"font-size: 80%;\"), tags$p(fish_caught, style = \"font-size: 150%;font-weight: bold;\"),\n             icon = icon(\"trophy\"), color = \"purple\")\n  })\n  \n  # Number of lures tried\n  \n  output$progressL <- renderValueBox({\n    Lure = as.integer(lure %>% filter(n_ses == input$Ses) %>% nrow())\n    valueBox(tags$p(\"Lure tried\", style = \"font-size: 80%;\"), tags$p(Lure, style = \"font-size: 150%;font-weight: bold;\"),\n             icon = icon(\"fish\"), color = \"purple\")\n  })\n  \n  output$TidePlot <- renderPlotly({\n    # generate plot depending on session\n    plot_tide_ses(dat, input$Ses, 4)\n  })\n  output$FlowPlot <- renderPlotly({\n    # generate plot depending on session\n    plot_flow_ses(dat_t, input$Ses, 4)\n  })\n  output$LurePlot <- renderPlotly({\n    # generate plot depending on session\n    lure_change(lure, caught, dat, input$Ses)\n  })\n  \n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}