<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>plotly on Aurélien Callens</title>
    <link>https://aureliencallens.github.io/tags/plotly/</link>
    <description>Recent content in plotly on Aurélien Callens</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>aurelien.callens@gmail.com (Aurelien Callens)</managingEditor>
    <webMaster>aurelien.callens@gmail.com (Aurelien Callens)</webMaster>
    <lastBuildDate>Tue, 12 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://aureliencallens.github.io/tags/plotly/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Can R and Shiny make me a better fisherman? Part 4</title>
      <link>https://aureliencallens.github.io/2022/04/12/r-shiny-fishing-part4/</link>
      <pubDate>Tue, 12 Apr 2022 00:00:00 +0000</pubDate>
      <author>aurelien.callens@gmail.com (Aurelien Callens)</author>
      <guid>https://aureliencallens.github.io/2022/04/12/r-shiny-fishing-part4/</guid>
      <description>


&lt;p&gt;In this post, I explore the data I have collected during the last year with the updated version of the application (presented &lt;a href=&#34;https://aureliencallens.github.io/2021/06/01/r-shiny-fishing-part3/&#34;&gt;here&lt;/a&gt;). This quick exploratory analysis is performed with two packages I really enjoy: &lt;em&gt;Plotly&lt;/em&gt; and &lt;em&gt;shiny&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;For reminder, my new application store the data in three csv files. The first one contains variables related to the fishing conditions. The second one contains information about my catches and finally the third one contains information about the characteristics of the lures I used during the session.&lt;/p&gt;
&lt;div id=&#34;shiny-to-explore-fishing-data-by-session&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Shiny to explore fishing data by session&lt;/h2&gt;
&lt;p&gt;I coded a small shiny application that provide a summary of the tide and river flow conditions, the lure changes and catches for each session. Don’t hesitate to explore my fishing data !&lt;/p&gt;
&lt;div class=&#34;wrap&#34; style=&#34;width: 100%; height: 1500px;
    padding: 0; overflow: hidden;&#34;&gt;
&lt;iframe style=&#34;width: 800px;
    height: 1550px;
    border: 0;
    -ms-transform: scale(0.25);
    -moz-transform: scale(0.25);
    -o-transform: scale(0.25);
    -webkit-transform: scale(0.25);
    transform: scale(0.95);
    -ms-transform-origin: 0 0;
    -moz-transform-origin: 0 0;
    -o-transform-origin: 0 0;
    -webkit-transform-origin: 0 0;
    transform-origin: 0 0;&#34; src=&#34;https://aureliencallens.shinyapps.io/Fishing_analysis/&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;code-of-the-shiny-application&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Code of the shiny application&lt;/h2&gt;
&lt;p&gt;Here is the code of the plotly graphs in the application:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(plotly)
library(tidyverse)


#&amp;#39; For the tide plot
#&amp;#39; 
#&amp;#39; @param dat first dataframe with session characteristics
#&amp;#39; @param n_ses the id (number) of the session
#&amp;#39; @param temporal_range number of hours to display (before and after the session)
#&amp;#39; @return A plotly object
plot_tide_ses &amp;lt;- function(dat, n_ses, temporal_range = 4){

  dat_t &amp;lt;- dat %&amp;gt;% 
    filter(Session == n_ses) %&amp;gt;% 
    mutate(Tide_ts = list(eval(parse(text = Ts_tide))))
  dat_tide &amp;lt;- as.data.frame(dat_t$Tide_ts)
  dat_tide$hour &amp;lt;- as.POSIXct(dat_tide$hour, origin = &amp;quot;1970-01-01&amp;quot;)
  dat_tide$Water &amp;lt;- as.numeric(as.character(dat_tide$Water))
  
  plot_ly(data = dat_tide, 
          x = ~ hour, 
          y = ~ Water, 
          mode = &amp;#39;lines&amp;#39;) %&amp;gt;%  
    layout(shapes = list(
      list(type = &amp;#39;line&amp;#39;,
           x0 = as.POSIXct(dat_t$Beg),
           x1 = as.POSIXct(dat_t$Beg),
           y0 = min(dat_tide$Water),
           y1 = max(dat_tide$Water),
           line = list(dash = &amp;#39;dot&amp;#39;, width = 1)),
      list(type = &amp;#39;line&amp;#39;,
           x0 =  as.POSIXct(dat_t$End),
           x1 = as.POSIXct(dat_t$End),
           y0 = min(dat_tide$Water),
           y1 = max(dat_tide$Water),
           line = list(dash = &amp;#39;dot&amp;#39;, width = 1))),
      xaxis = list(range = as.POSIXct(c(as.POSIXct(dat_t$Beg) - 3600*temporal_range ,
                                        as.POSIXct(dat_t$End) + 3600*temporal_range )),
                   title = &amp;quot;&amp;quot;),
      yaxis = list(title = &amp;quot;Tide level&amp;quot;))
}

#&amp;#39; For the river flow plot
#&amp;#39; 
#&amp;#39; @param dat first dataframe with session characteristics
#&amp;#39; @param n_ses the id (number) of the session
#&amp;#39; @param past_days number of previous to display (before the session)
#&amp;#39; @return A plotly object
plot_flow_ses &amp;lt;- function(dat, n_ses, past_days = 4){
  dat_t &amp;lt;- dat %&amp;gt;% 
    filter(Session == n_ses) %&amp;gt;% 
    mutate(Flow_ts = list(eval(parse(text = Ts_flow))))
  
  dat_flow &amp;lt;- as.data.frame(dat_t$Flow_ts)
  dat_flow$Date &amp;lt;- as.POSIXct(dat_flow$Date, origin = &amp;quot;1970-01-01&amp;quot;)
  dat_flow$Nive &amp;lt;- as.numeric(as.character(dat_flow$Nive))
  dat_flow$Adour &amp;lt;- as.numeric(as.character(dat_flow$Adour))
  
  
  dat_flow &amp;lt;- dat_flow %&amp;gt;% 
    pivot_longer(cols = c(Nive, Adour), 
                 names_to = &amp;quot;River&amp;quot;,
                 values_to = &amp;quot;Flow&amp;quot;)
  
  plot_ly(data = dat_flow, 
          x = ~ Date,
          y = ~ Flow, 
          color = ~ River, 
          mode = &amp;#39;lines&amp;#39;) %&amp;gt;%  
    layout(shapes = list(
      list(type=&amp;#39;line&amp;#39;,
           x0 = as.POSIXct(dat_t$Beg),
           x1 = as.POSIXct(dat_t$Beg),
           y0 = min(dat_flow$Flow),
           y1 = max(dat_flow$Flow),
           line = list(dash = &amp;#39;dot&amp;#39;, width = 1))),
      xaxis = list(range = as.POSIXct(c(as.POSIXct(dat_t$Beg) - 3600*24*past_days,
                                        as.POSIXct(dat_t$End) )),
                   title = &amp;quot;&amp;quot;))
}

#&amp;#39; Function to prepare the dataset for the plot of lure change and catch
#&amp;#39; 
#&amp;#39; @param lure third dataframe with lure changes (hours) and characteristics
#&amp;#39; @param session first dataframe with session characteristics
#&amp;#39; @param ses_n the id (number) of the session
#&amp;#39; @return A dataframe
start_end_fonction &amp;lt;- function(lure, session, ses_n){
  dat_ses &amp;lt;- session %&amp;gt;% 
    filter(Session == ses_n)
  
  dat_lure &amp;lt;- lure %&amp;gt;% 
    filter(n_ses == ses_n)
  
  startdates &amp;lt;- dat_lure$time
  enddates &amp;lt;- c(startdates[-1], dat_ses$End)
  
  data.frame(change = length(startdates):1, 
             start = as.POSIXct(startdates),
             end = as.POSIXct(enddates),
             type = dat_lure$type_lure,
             text = paste(dat_lure$color_lure, dat_lure$length_lure))
}

#&amp;#39; For the plot of lure change and catch
#&amp;#39; 
#&amp;#39; @param lure third dataframe with lure changes (hours) and characteristics
#&amp;#39; @param caught second dataframe with fish caught characteristics
#&amp;#39; @param session first dataframe with session characteristics
#&amp;#39; @param n_ses the id (number) of the session
#&amp;#39; @return A plotly object
lure_change &amp;lt;- function(lure, caught, dat, n_ses){
  
  df &amp;lt;- start_end_fonction(lure, dat, n_ses)
  
  catch &amp;lt;- caught %&amp;gt;% 
    filter(n_ses == n_ses)
  
  dat_t &amp;lt;- dat %&amp;gt;% 
    filter(Session == n_ses) %&amp;gt;% 
    mutate(Tide_ts = list(eval(parse(text = Ts_tide))))
  dat_tide &amp;lt;- as.data.frame(dat_t$Tide_ts)
  dat_tide$hour &amp;lt;- as.POSIXct(dat_tide$hour, origin = &amp;quot;1970-01-01&amp;quot;)
  dat_tide$Water &amp;lt;- as.numeric(as.character(dat_tide$Water))
  
  plot_ly() %&amp;gt;% 
    add_segments(data = df,
                 x = ~ start,
                 xend = ~ end,
                 y = ~ change,
                 yend = ~ change,
                 color = ~ type,
                 #text = ~ text,
                 size = I(5),
                 alpha = 0.8) %&amp;gt;%
    add_segments(x = as.POSIXct(catch$time),
                 xend = as.POSIXct(catch$time),
                 y = min(df$change),
                 yend = max(df$change),
                 line = list(color = &amp;quot;red&amp;quot;, dash = &amp;quot;dash&amp;quot;),
                 name = &amp;#39;Fish caught&amp;#39;) %&amp;gt;%
    add_trace(data = dat_tide, 
              x = ~ hour, 
              y = ~ Water, 
              mode = &amp;#39;lines&amp;#39;, 
              yaxis = &amp;quot;y2&amp;quot;,
              name = &amp;quot;Water level&amp;quot;,
              alpha = 0.4,
              hoverinfo = &amp;#39;skip&amp;#39;
    ) %&amp;gt;% 
    layout(xaxis = list(range = c(df$start[1] - 1000 , df$end[nrow(df)] + 1000),
                        title = &amp;quot;&amp;quot;),
           yaxis = list(title = &amp;quot;&amp;quot;, zeroline = FALSE, showline = FALSE,
                        showticklabels = FALSE, showgrid = FALSE ),
           yaxis2 = list(overlaying = &amp;quot;y&amp;quot;, side = &amp;quot;right&amp;quot;))
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here is the code of this simple yet informative application:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(shiny)
library(shinyWidgets)
library(shinydashboard)
library(plotly)
library(tidyverse)
source(&amp;#39;plot_functions.R&amp;#39;)
dat &amp;lt;- read_csv(&amp;quot;session1.csv&amp;quot;)
caught &amp;lt;- read_csv(&amp;quot;catch1.csv&amp;quot;)
lure &amp;lt;- read_csv(&amp;quot;lure.csv&amp;quot;)

# In order to save the tide and flow time series I parse the data in the dataframe
# The following line is used to transform the parsed text into usable values
dat_t &amp;lt;- dat %&amp;gt;% 
  mutate(Tide_ts = list(eval(parse(text = Ts_tide))),
         Flow_ts = list(eval(parse(text = Ts_flow))))

body &amp;lt;- dashboardBody(fluidPage(
  # Application title
  h1(&amp;quot;Exploratory analysis of fishing data&amp;quot;,
  align = &amp;quot;center&amp;quot;,
  style = &amp;quot;padding: 40px;  text-align: center;  background: #605ca8;  color: white;  font-size: 40px;&amp;quot;),
  br(),
  # Dropdown menu to select the fishing session
  fluidRow(align = &amp;quot;center&amp;quot;,
           pickerInput(inputId = &amp;#39;Ses&amp;#39;,
                       label = h3(&amp;#39;Select a fishing session:&amp;#39;),
                       choices = unique(dat$Session[-1]),
                       options = list(
                         style = &amp;quot;btn-primary&amp;quot;),
                       choicesOpt = list(
                         style = rep_len(&amp;quot;font-size: 75%; line-height: 1.6;&amp;quot;, 4)
                       ))),
  br(),
  br(),
  # Key figures of the session
  fluidRow(
    valueBoxOutput(&amp;quot;progressD&amp;quot;, width = 4),
    valueBoxOutput(&amp;quot;progressF&amp;quot;, width = 4),
    valueBoxOutput(&amp;quot;progressL&amp;quot;, width = 4)),
  br(),
  
  br(),
  # Graphs of the tide and river flow of recent days
  fluidRow(
    box(title = &amp;quot;Tidal water level&amp;quot;, status = &amp;quot;primary&amp;quot;, 
        plotlyOutput(&amp;quot;TidePlot&amp;quot;), width = 6),
    box(title = &amp;quot;River flow&amp;quot;, status = &amp;quot;primary&amp;quot;,
        plotlyOutput(&amp;quot;FlowPlot&amp;quot;), width = 6)),
  br(),
  # Graph lure changes during the session + catch
  fluidRow(
    box(title = &amp;quot;Lures tested and fish capture&amp;quot;, status = &amp;quot;warning&amp;quot;, 
        plotlyOutput(&amp;quot;LurePlot&amp;quot;), width=12))
))

ui &amp;lt;- dashboardPage(
  
  dashboardHeader(disable = TRUE),
  
  dashboardSidebar(disable = TRUE),
  
  body
)


# Define server logic required to draw a histogram
server &amp;lt;- function(input, output) {
  
  # Duration
  output$progressD &amp;lt;- renderValueBox({
    Duration = as.integer(difftime(as.POSIXct(dat$End[dat$Session == input$Ses]), as.POSIXct(dat$Beg[dat$Session == input$Ses]), units = &amp;#39;mins&amp;#39;))
    valueBox(tags$p(&amp;quot;Duration&amp;quot;, style = &amp;quot;font-size: 80%;&amp;quot;),
             tags$p(paste(Duration, &amp;quot;min&amp;quot;), style = &amp;quot;font-size: 150%; font-weight: bold;&amp;quot;),
             icon = icon(&amp;quot;clock&amp;quot;), color = &amp;quot;purple&amp;quot;)
  })
  
  # Number of fish
  
  output$progressF &amp;lt;- renderValueBox({
    fish_caught = as.integer(caught %&amp;gt;% filter(n_ses == input$Ses) %&amp;gt;% nrow())
    valueBox(tags$p(&amp;quot;Fish caught&amp;quot;, style = &amp;quot;font-size: 80%;&amp;quot;), tags$p(fish_caught, style = &amp;quot;font-size: 150%;font-weight: bold;&amp;quot;),
             icon = icon(&amp;quot;trophy&amp;quot;), color = &amp;quot;purple&amp;quot;)
  })
  
  # Number of lures tried
  
  output$progressL &amp;lt;- renderValueBox({
    Lure = as.integer(lure %&amp;gt;% filter(n_ses == input$Ses) %&amp;gt;% nrow())
    valueBox(tags$p(&amp;quot;Lure tried&amp;quot;, style = &amp;quot;font-size: 80%;&amp;quot;), tags$p(Lure, style = &amp;quot;font-size: 150%;font-weight: bold;&amp;quot;),
             icon = icon(&amp;quot;fish&amp;quot;), color = &amp;quot;purple&amp;quot;)
  })
  
  output$TidePlot &amp;lt;- renderPlotly({
    # generate plot depending on session
    plot_tide_ses(dat, input$Ses, 4)
  })
  output$FlowPlot &amp;lt;- renderPlotly({
    # generate plot depending on session
    plot_flow_ses(dat_t, input$Ses, 4)
  })
  output$LurePlot &amp;lt;- renderPlotly({
    # generate plot depending on session
    lure_change(lure, caught, dat, input$Ses)
  })
  
}

# Run the application 
shinyApp(ui = ui, server = server)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Can R and Shiny make me a better fisherman? Part 3</title>
      <link>https://aureliencallens.github.io/2021/06/01/r-shiny-fishing-part3/</link>
      <pubDate>Tue, 01 Jun 2021 00:00:00 +0000</pubDate>
      <author>aurelien.callens@gmail.com (Aurelien Callens)</author>
      <guid>https://aureliencallens.github.io/2021/06/01/r-shiny-fishing-part3/</guid>
      <description>


&lt;p&gt;In this &lt;a href=&#34;https://aureliencallens.github.io/2020/09/12/r-shiny-fishing-part1/&#34;&gt;previous post&lt;/a&gt;, I presented the shiny application I developed to record data about my fishing session. In today’s post, I will present briefly the changes and updates I made to improve the application. Here are the main changes :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Weather API&lt;/strong&gt;: the API I was using (Dark Sky) stopped furnishing free data. I changed for &lt;a href=&#34;https://openweathermap.org/&#34;&gt;Openweathermap&lt;/a&gt; and I needed to update the functions to gather the same information as before.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;River flow&lt;/strong&gt;: the first version of the application did not collect any information about the flow of the river in which I am fishing. However I am convinced that the river flow before the fishing session might have an impact on the presence of seabass. I therefore created a web scrapping function that collect the flow of the Nive and the Adour (main fishing rivers).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Collecting lure data&lt;/strong&gt;: in the first version, data about fishing lures I used were only collected when a fish was caught. However I did not have data about how long I used the lure before catching a fish. The new version of the application now collects data about lure and how often I change lure.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;weather-api&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Weather API&lt;/h2&gt;
&lt;p&gt;Small changes were made to adapt the former weather function to the new weather API. As this new API do not furnish moon phase data, I decided to compute the moon phase with the &lt;em&gt;oce&lt;/em&gt; package:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(httr)
library(jsonlite)
library(tidyverse)
library(rvest)
library(oce)

weather &amp;lt;- function(lat, lon, API_key){
  url &amp;lt;- paste0(&amp;quot;api.openweathermap.org/data/2.5/weather?lat=&amp;quot;, lat, &amp;quot;&amp;amp;lon=&amp;quot;, lon, &amp;quot;&amp;amp;appid=&amp;quot;, API_key, &amp;quot;&amp;amp;units=metric&amp;quot;)
  
  rep &amp;lt;- GET(url)
  
  table &amp;lt;- fromJSON(content(rep, &amp;quot;text&amp;quot;))
  
  # The weather API don&amp;#39;t provide moon phase so I compute it with Oce package
  moon_phase &amp;lt;- round(moonAngle(t = Sys.Date(),
                                longitude = as.numeric(lon),
                                latitude = as.numeric(lat))$illuminatedFraction,
                      3)
  
  
  current.weather.info &amp;lt;- data.frame(Air_temp = table$main$temp,
                                     Weather = table$weather$main,
                                     Atm_pres = table$main$pressure,
                                     Wind_str = table$wind$speed,
                                     Wind_dir = table$wind$deg,
                                     Cloud_cover = table$clouds$all,
                                     PrecipInt = ifelse(is.null(table$rains$`1h`), 0, table$rains$`1h`),  
                                     Moon = moon_phase)
  return(current.weather.info)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;river-flow&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;River flow&lt;/h2&gt;
&lt;p&gt;I wrote functions to scrap information about the flow of the rivers in which I fish the most on a french website:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Get and prepare the flow data
get_Qdata &amp;lt;- function(link){
  table &amp;lt;- fromJSON(content(GET(link), &amp;quot;text&amp;quot;))
  table &amp;lt;- table$Serie$ObssHydro
  table &amp;lt;- as.data.frame(table)
  table$DtObsHydro &amp;lt;- sub(&amp;quot;T&amp;quot;, &amp;quot; &amp;quot;, table$DtObsHydro)
  table$DtObsHydro &amp;lt;- substr(table$DtObsHydro, start = 1, stop = 19)
  ts &amp;lt;- data.frame(Date = seq.POSIXt(as.POSIXct(range(table$DtObsHydro)[1],&amp;#39;%m/%d/%y %H:%M:%S&amp;#39;), 
                                     as.POSIXct(range(table$DtObsHydro)[2],&amp;#39;%m/%d/%y %H:%M:%S&amp;#39;), by=&amp;quot;hour&amp;quot;))
  
  table$DtObsHydro &amp;lt;- as.POSIXct(table$DtObsHydro, format = &amp;quot;%Y-%m-%d %H:%M:%S&amp;quot;)
  
  table &amp;lt;- full_join(table, ts, by = c(&amp;quot;DtObsHydro&amp;quot; = &amp;quot;Date&amp;quot;)) %&amp;gt;% arrange(DtObsHydro)
  return(table)
}

# Main function to collect river flow 

river_flow &amp;lt;- function(){
  # Url of website to scrap:
  url_index &amp;lt;- &amp;quot;https://www.vigicrues.gouv.fr/services/station.json/index.php&amp;quot;
  
  rep &amp;lt;- GET(url_index)
  
  table_index &amp;lt;- fromJSON(content(rep, &amp;quot;text&amp;quot;))$Stations%&amp;gt;% 
    na.omit()
  
  # I need to add the flow of several rivers to get the flow of the rivers I am interested in:
  stations &amp;lt;- table_index %&amp;gt;% 
    filter(LbStationHydro %in% c(&amp;quot;Pontonx-sur-l&amp;#39;Adour&amp;quot;, &amp;quot;St-Pandelon&amp;quot;, &amp;quot;Artiguelouve&amp;quot;, &amp;quot;Escos&amp;quot;,
                                 &amp;quot;Aïcirits [St-Palais]&amp;quot;, &amp;quot;Cambo-les-Bains&amp;quot;))
  
  base_url &amp;lt;- &amp;quot;http://www.vigicrues.gouv.fr/services/observations.json?CdStationHydro=&amp;quot;
  height_url &amp;lt;- &amp;quot;&amp;amp;FormatDate=iso&amp;quot;
  Q_url &amp;lt;- &amp;quot;&amp;amp;GrdSerie=Q&amp;quot;
  
  stations &amp;lt;- stations %&amp;gt;% 
    mutate(WL_link = paste0(base_url, CdStationHydro, height_url),
           Q_link = paste0(WL_link, Q_url))
  
  data_Q &amp;lt;- lapply(stations$Q_link, 
                   function(x){get_Qdata(x)})
  
  data_Q &amp;lt;- suppressWarnings(Reduce(function(...) merge(..., all = TRUE, by = &amp;quot;DtObsHydro&amp;quot;),
                   data_Q))
  
  names(data_Q) &amp;lt;- c(&amp;quot;Date&amp;quot;, stations$LbStationHydro) 
  
  data_Q &amp;lt;- data_Q  %&amp;gt;% 
    mutate(hour_of_day = format(Date, &amp;quot;%Y-%m-%d %H&amp;quot;))
  
  
  data_Q &amp;lt;- aggregate(.~hour_of_day, data = data_Q, mean, na.rm = TRUE, na.action = na.pass)
  
  data_Q &amp;lt;- imputeTS::na_interpolation(data_Q, option = &amp;quot;linear&amp;quot;)
  
  final_data &amp;lt;- data_Q %&amp;gt;% 
    mutate(Adour = `Pontonx-sur-l&amp;#39;Adour` +  `Aïcirits [St-Palais]` + Artiguelouve + Escos + `St-Pandelon`,
           Date = as.POSIXct(hour_of_day, tryFormats = &amp;quot;%Y-%m-%d %H&amp;quot;)) %&amp;gt;% 
    select(Date, `Cambo-les-Bains`, Adour) %&amp;gt;% 
    rename(Nive = `Cambo-les-Bains`)
  
  Cur_flow &amp;lt;- data.frame(&amp;quot;Nive_c&amp;quot; = final_data[nrow(final_data), 2],
                         &amp;quot;Adour_c&amp;quot; = final_data[nrow(final_data), 3])
  
  
  final_data &amp;lt;- cbind(Cur_flow, final_data) %&amp;gt;% 
    nest(Ts_flow = c(Date, Nive, Adour)) %&amp;gt;% 
    mutate(Ts_flow = paste(Ts_flow))

  return(final_data)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;shiny-application&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Shiny application&lt;/h2&gt;
&lt;p&gt;A simplified graph of the new application is showed below:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://aureliencallens.github.io/img_post/graph_newapp.svg&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Simplified workflow of the new version of application&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ui-side&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;UI side&lt;/h3&gt;
&lt;p&gt;The UI side did not change that much, I only removed the tab that displayed fishing data on a map because I wasn’t using this feature too much:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Load libraries 
library(shiny)
library(shinyWidgets)
library(googlesheets)
library(miniUI)
library(leaflet)
library(rdrop2)
Sys.setenv(TZ=&amp;quot;Europe/Paris&amp;quot;)

#Import the functions for weather API and webscrapping 
suppressMessages(source(&amp;quot;api_functions.R&amp;quot;))


# Load the dropbox token : 
token &amp;lt;&amp;lt;- readRDS(&amp;quot;token.rds&amp;quot;)

# Minipage for small screens
ui &amp;lt;- miniPage(tags$script(&amp;#39;$(document).ready(function () {
                           navigator.geolocation.getCurrentPosition(onSuccess, onError);

                           function onError (err) {
                           Shiny.onInputChange(&amp;quot;geolocation&amp;quot;, false);
                           }

                           function onSuccess (position) {
                           setTimeout(function () {
                           var coords = position.coords;
                           console.log(coords.latitude + &amp;quot;, &amp;quot; + coords.longitude);
                           Shiny.onInputChange(&amp;quot;geolocation&amp;quot;, true);
                           Shiny.onInputChange(&amp;quot;lat&amp;quot;, coords.latitude);
                           Shiny.onInputChange(&amp;quot;long&amp;quot;, coords.longitude);
                           }, 1100)
                           }
                           });&amp;#39;),
               
               gadgetTitleBar(&amp;quot;Catch them all&amp;quot;, left = NULL, right = NULL),
               
               miniTabstripPanel(
                 
                 miniTabPanel(&amp;quot;Session&amp;quot;, icon = icon(&amp;quot;sliders&amp;quot;),
                              
                              miniContentPanel(uiOutput(&amp;quot;UI_sess&amp;quot;, align = &amp;quot;center&amp;quot;),
                                               uiOutput(&amp;quot;UI&amp;quot;, align = &amp;quot;center&amp;quot;))
                              
                 )
               )
               
)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;server-side&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Server side&lt;/h3&gt;
&lt;p&gt;Several changes were made in the server side to collect data about the lures I used. Now, each time I change my fishing lure, I fill a small form to collect the lure characteristics and it adds a line in a third csv file:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;server &amp;lt;- function(input, output, session){
  
  observeEvent(input$go ,{
    
  # Read the csv file containing information about fishing session. If a session is running,
  # display the UI that allows the user to input data about the fish caught. If a session is not started,
  # display a button to start the session and small survey on lure characteristics.
    
    dat &amp;lt;&amp;lt;- drop_read_csv(&amp;quot;/app_peche/session1.csv&amp;quot;, header = T, stringsAsFactors = F, dtoken = token)
    
    # Reactive UI
    
    output$UI &amp;lt;- renderUI({
      
      if(!is.na(rev(dat$End)[1])){
        # We now indicate what type of lure we use at the beginning of the session:
        tagList(
          selectInput(&amp;quot;lure1&amp;quot;, 
                      label = &amp;quot;Type de leurre&amp;quot;,
                      choices = list(&amp;quot;Shad&amp;quot; = &amp;quot;shad&amp;quot;,
                                     &amp;quot;Slug&amp;quot; = &amp;quot;slug&amp;quot;,
                                     &amp;quot;Jerkbait&amp;quot; = &amp;quot;jerkbait&amp;quot;,
                                     &amp;quot;Casting jig&amp;quot; = &amp;quot;jig&amp;quot;,
                                     &amp;quot;Topwater&amp;quot; = &amp;quot;topwater&amp;quot;),
                      selected = &amp;quot;shad&amp;quot;,
                      selectize = FALSE),
          
          selectInput(&amp;quot;color_lure1&amp;quot;, 
                      label = &amp;quot;Couleur du leurre&amp;quot;,
                      choices = list(&amp;quot;Naturel&amp;quot; = &amp;quot;naturel&amp;quot;,
                                     &amp;quot;Sombre&amp;quot; = &amp;quot;sombre&amp;quot;,
                                     &amp;quot;Clair&amp;quot; = &amp;quot;clair&amp;quot;,
                                     &amp;quot;Flashy&amp;quot; = &amp;quot;flashy&amp;quot; ),
                      selected = &amp;quot;naturel&amp;quot;,
                      selectize = FALSE),
          
          selectInput(&amp;quot;length_lure1&amp;quot;,
                      label = &amp;quot;Taille du leurre&amp;quot;,
                      choices = list(&amp;quot;Petit&amp;quot; = &amp;quot;petit&amp;quot;,
                                     &amp;quot;Moyen&amp;quot; = &amp;quot;moyen&amp;quot;,
                                     &amp;quot;Grand&amp;quot; = &amp;quot;grand&amp;quot;),
                      selected = &amp;quot;petit&amp;quot;,
                      selectize = FALSE),
          
          actionButton(&amp;quot;go&amp;quot;,&amp;quot;Commencer session !&amp;quot;))
      }else{
        
        tagList(actionButton(&amp;quot;go&amp;quot;,&amp;quot;End session&amp;quot;))
      }
      
    })
    
    output$UI_sess &amp;lt;- renderUI({
      
      if(!is.na(rev(dat$End)[1])){
        
        tagList(textInput(&amp;quot;comments&amp;quot;, label = &amp;quot;Commentaire avant le début?&amp;quot;, value = &amp;quot;NA&amp;quot;))
        
      }else{
        input$catch
        input$lure
        tagList(
          
          selectInput(&amp;quot;lure_type&amp;quot;, 
                      label = &amp;quot;Type de leurre&amp;quot;,
                      choices = list(&amp;quot;Shad&amp;quot; = &amp;quot;shad&amp;quot;,
                                     &amp;quot;Slug&amp;quot; = &amp;quot;slug&amp;quot;,
                                     &amp;quot;Jerkbait&amp;quot; = &amp;quot;jerkbait&amp;quot;,
                                     &amp;quot;Casting jig&amp;quot; = &amp;quot;jig&amp;quot;,
                                     &amp;quot;Topwater&amp;quot; = &amp;quot;topwater&amp;quot;),
                      selected = &amp;quot;shad&amp;quot;,
                      selectize = FALSE),
          
          selectInput(&amp;quot;color_lure&amp;quot;, 
                      label = &amp;quot;Couleur du leurre&amp;quot;,
                      choices = list(&amp;quot;Naturel&amp;quot; = &amp;quot;naturel&amp;quot;,
                                     &amp;quot;Sombre&amp;quot; = &amp;quot;sombre&amp;quot;,
                                     &amp;quot;Clair&amp;quot; = &amp;quot;clair&amp;quot;,
                                     &amp;quot;Flashy&amp;quot; = &amp;quot;flashy&amp;quot; ),
                      selected = &amp;quot;naturel&amp;quot;,
                      selectize = FALSE),
          
          selectInput(&amp;quot;length_lure&amp;quot;,
                      label = &amp;quot;Taille du leurre&amp;quot;,
                      choices = list(&amp;quot;Petit&amp;quot; = &amp;quot;petit&amp;quot;,
                                     &amp;quot;Moyen&amp;quot; = &amp;quot;moyen&amp;quot;,
                                     &amp;quot;Grand&amp;quot; = &amp;quot;grand&amp;quot;),
                      selected = &amp;quot;petit&amp;quot;,
                      selectize = FALSE),
          
          actionButton(&amp;quot;lure&amp;quot;,
                       label = &amp;quot;Changer de leurre!&amp;quot;),
          
          br(), 
          br(), 
          
          h4(&amp;quot;Ajouter une capture&amp;quot;),
          
          selectInput(&amp;quot;species&amp;quot;, 
                      label = &amp;quot;Espèces&amp;quot;,
                      choices = list(&amp;quot;Bar&amp;quot; = &amp;quot;bar&amp;quot;,
                                     &amp;quot;Bar moucheté&amp;quot; = &amp;quot;bar_m&amp;quot;,
                                     &amp;quot;Alose&amp;quot; = &amp;quot;alose&amp;quot;,
                                     &amp;quot;Maquereau&amp;quot; = &amp;quot;maquereau&amp;quot;,
                                     &amp;quot;Chinchard&amp;quot; = &amp;quot;chinchard&amp;quot;),
                      selected = &amp;quot;bar&amp;quot;),
          
          sliderInput(&amp;quot;length&amp;quot;,
                      label = &amp;quot;Taille du poisson&amp;quot;,
                      value = 25, 
                      min = 0, 
                      max = 80, 
                      step = 1),
          
          actionButton(&amp;quot;catch&amp;quot;,&amp;quot;Rajoutez cette capture aux stats!&amp;quot;),
          
          br(), 
          br(), 
          
          textInput(&amp;quot;comments1&amp;quot;, label = h4(&amp;quot;Commentaire avant la fin ?&amp;quot;), value = &amp;quot;NA&amp;quot;)
        )
      }
    })
  }, ignoreNULL = F)
  
  
  #If the button is pushed, create the line to be added in the csv file. 
  
  observeEvent(input$go,{
    
    # Two outcomes depending if the session starts or ends. This gives the possibility 
    # to the user to add a comment before starting the session or after ending the session
    
    if(!is.na(rev(dat$End)[1])){
      
      #Tide + geoloc + Weather
      c_tide &amp;lt;- tide()
      geoloc &amp;lt;- c(input$lat,input$long)
      current.weather.info &amp;lt;- weather(lat = geoloc[1], lon = geoloc[2])
      river.flow &amp;lt;- river_flow()
      
      n_ses &amp;lt;- c(rev(dat$Session)[1] + 1)
      time_beg &amp;lt;- as.character(as.POSIXct(Sys.time()))
      comment &amp;lt;- input$comments
      dat.f &amp;lt;&amp;lt;- cbind(data.frame(n_ses,
                                 time_beg,
                                 NA,
                                 geoloc[2],
                                 geoloc[1]),
                      current.weather.info,
                      c_tide,
                      river.flow,
                      comment)
      names(dat.f) &amp;lt;- names(dat)
      print(dat.f)
      final_dat &amp;lt;- rbind(dat, dat.f)
      
      lure &amp;lt;- drop_read_csv(&amp;quot;/app_peche/lure.csv&amp;quot;,
                            header = T,
                            stringsAsFactors = F,
                            dtoken = token)
      
      new_lure &amp;lt;- data.frame(n_ses = n_ses,
                             time = as.character(as.POSIXct(Sys.time())),
                             type_lure = input$lure1,
                             color_lure = input$color_lure1,
                             length_lure = input$length_lure1)
      
      new_df &amp;lt;- rbind(lure, 
                      new_lure)
      
      write_csv(as.data.frame(new_df), &amp;quot;lure.csv&amp;quot;)
      drop_upload(&amp;quot;lure.csv&amp;quot;, path = &amp;quot;App_peche&amp;quot;, mode = &amp;quot;overwrite&amp;quot;, dtoken = token)
      

    }else{
      
      dat$End[nrow(dat)] &amp;lt;- as.character(as.POSIXct(Sys.time()))
      dat$Comments[nrow(dat)] &amp;lt;- paste(dat$Comments[nrow(dat)], &amp;quot;/&amp;quot;, input$comments1)
      final_dat &amp;lt;- dat 
    }
    
    # Write csv in temporary files of shiny server 
    write_csv(as.data.frame(final_dat), &amp;quot;session1.csv&amp;quot;)
    
    # Upload it to dropbox account 
    drop_upload(&amp;quot;session1.csv&amp;quot;, path = &amp;quot;App_peche&amp;quot;, mode = &amp;quot;overwrite&amp;quot;, dtoken = token)
  })
  
  # Add a line to the catch csv file whenever a fish is caught
  observeEvent(input$catch,{
    caugth &amp;lt;- drop_read_csv(&amp;quot;/app_peche/catch1.csv&amp;quot;, header = T, stringsAsFactors = F, dtoken = token)
    
    catch &amp;lt;- data.frame(n_ses = dat$Session[nrow(dat)],
                        time = as.character(as.POSIXct(Sys.time())),
                        species = input$species,
                        length = input$length)
    
    b &amp;lt;- rbind(caugth,catch)
    
    write_csv(as.data.frame(b), &amp;quot;catch1.csv&amp;quot;)
    drop_upload(&amp;quot;catch1.csv&amp;quot;, path = &amp;quot;App_peche&amp;quot;, mode = &amp;quot;overwrite&amp;quot;, dtoken = token)
  })
  
  
  observeEvent(input$lure,{
    lure &amp;lt;- drop_read_csv(&amp;quot;/app_peche/lure.csv&amp;quot;,
                          header = T,
                          stringsAsFactors = F,
                          dtoken = token)
    
    new_lure &amp;lt;- data.frame(n_ses = dat$Session[nrow(dat)],
                        time = as.character(as.POSIXct(Sys.time())),
                        type_lure = input$lure_type,
                        color_lure = input$color_lure,
                        length_lure = input$length_lure)
    
    new_df &amp;lt;- rbind(lure, 
               new_lure)
    
    write_csv(as.data.frame(new_df), &amp;quot;lure.csv&amp;quot;)
    drop_upload(&amp;quot;lure.csv&amp;quot;, path = &amp;quot;App_peche&amp;quot;, mode = &amp;quot;overwrite&amp;quot;, dtoken = token)
  })
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusion&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I have tested this new application during two fishing sessions and it has been working like a charm. I can’t wait to present you my findings at the end of this fishing season !&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
