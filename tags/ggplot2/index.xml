<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ggplot2 on Aurélien Callens</title>
    <link>https://aureliencallens.github.io/tags/ggplot2/</link>
    <description>Recent content in ggplot2 on Aurélien Callens</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>aurelien.callens@gmail.com (Aurelien Callens)</managingEditor>
    <webMaster>aurelien.callens@gmail.com (Aurelien Callens)</webMaster>
    <lastBuildDate>Tue, 19 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://aureliencallens.github.io/tags/ggplot2/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Analysis of the top R packages</title>
      <link>https://aureliencallens.github.io/2022/07/19/analysis-of-the-top-r-packages/</link>
      <pubDate>Tue, 19 Jul 2022 00:00:00 +0000</pubDate>
      <author>aurelien.callens@gmail.com (Aurelien Callens)</author>
      <guid>https://aureliencallens.github.io/2022/07/19/analysis-of-the-top-r-packages/</guid>
      <description>
&lt;script src=&#34;https://aureliencallens.github.io/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://aureliencallens.github.io/rmarkdown-libs/vis/vis-network.min.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://aureliencallens.github.io/rmarkdown-libs/vis/vis-network.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://aureliencallens.github.io/rmarkdown-libs/visNetwork-binding/visNetwork.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;After a little while coding in Python everyday for my work, I needed to make a break and perform some R analysis! Since the beginning of my postdoc, I haven’t followed the last trends concerning R package. In this post, I am going to analyze some data about R package to see what are the most downloaded R package during the past weeks. I will also visualize all the relationships between the R package by looking at their required dependencies.&lt;/p&gt;
&lt;p&gt;Let’s import the package required for this analysis:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(magrittr)
library(cranlogs)
library(igraph)
library(visNetwork)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;how-to-find-the-most-popular-r-package&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;How to find the most popular R package ?&lt;/h1&gt;
&lt;p&gt;The first thing is to gather the data about the number of downloads for each package. Luckily for us, there is a package called &lt;em&gt;cranlogs&lt;/em&gt; that does just what we need ! With a simple line of command we can collect data about the 50 packages with the most downloads in the last month, we can then plot the result:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;popular_pckg &amp;lt;- cran_top_downloads(&amp;quot;last-month&amp;quot;, 50)

popular_pckg %&amp;gt;%
  mutate(package = fct_reorder(package, desc(count))) %&amp;gt;% 
  ggplot(aes(x = package, y = count)) +
  geom_bar(stat=&amp;quot;identity&amp;quot;) + 
  scale_x_discrete(expand = expansion(mult = c(0, 0.02))) +
  theme_bw() +
  xlab(&amp;quot;&amp;quot;) +
  ylab(&amp;quot;Downloads&amp;quot;)+
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
        axis.title = element_text(size = 12),
        axis.text = element_text(size = 9, face = &amp;quot;bold&amp;quot;),
        plot.title = element_text(size = 14),
        legend.position = &amp;quot;none&amp;quot;) +labs(x = NULL)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://aureliencallens.github.io/post/2022-07-19-analysis-of-the-top-r-packages.en_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;I thought this graph will be harder to make because of the availability of the data but with the right package everything can be done !&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;visualisation-of-the-dependencies-between-packages&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Visualisation of the dependencies between packages&lt;/h1&gt;
&lt;p&gt;Once I saw the above graph, I was wondering about all the dependencies between these packages and I wanted to know which one was the most “connected”. To answer this question, I need more data, especially about the required dependencies of each package. After some research, I found out that data about package (including description and dependencies) can be extracted with a function in the &lt;em&gt;tools&lt;/em&gt; package:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_pkg &amp;lt;- tools::CRAN_package_db()[, c(&amp;#39;Package&amp;#39;, &amp;#39;Description&amp;#39;, &amp;#39;Imports&amp;#39;)]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, this function extract the data for all the packages and I want to perform the analysis only on the top 100 popular packages. So I decided to couple the function of the &lt;em&gt;cranlog&lt;/em&gt; package with the database I collected with the &lt;code&gt;CRAN_package_db()&lt;/code&gt; function:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Can be quite long hence the parallel map
plan(multisession, workers = 12)
monthly_dl &amp;lt;- future_map(df_pkg$Package, function(x){sum(cran_downloads(x, &amp;#39;last-month&amp;#39;)$count)})
df_pkg$monthly_dl &amp;lt;- unlist(monthly_dl)
# write_csv(df_pkg, &amp;#39;R_pkg_dl.csv&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can then filter by number of downloads and keep only the top 100:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_pkg &amp;lt;- df_pkg %&amp;gt;% 
  distinct(Package, .keep_all= TRUE) %&amp;gt;% 
  arrange(monthly_dl) %&amp;gt;% 
  top_n(100, monthly_dl)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, it is time to prepare the data for a graph visualization. To make a graph, we need two tables. The first one must contain all the relationships between nodes (in our case nodes are packages), it has two columns : ‘from’ and ‘to’. The second table contains only one column with the names of the nodes.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;import_cleaning &amp;lt;- function(text){
  text &amp;lt;- gsub(&amp;#39;\\s*\\([^\\)]+\\)&amp;#39;, &amp;#39;&amp;#39;, text)
  text &amp;lt;- gsub(&amp;#39;\\n&amp;#39;, &amp;#39; &amp;#39;, text)
  text &amp;lt;- gsub(&amp;#39; &amp;#39;, &amp;#39;&amp;#39;, text, fixed = TRUE)
  text &amp;lt;- str_split(text, &amp;#39;,&amp;#39;)
  return(text)
}

import_cleaning(df_pkg$Imports[2])

test &amp;lt;- df_pkg %&amp;gt;% 
  mutate(cleaned_imports = import_cleaning(Imports))

df_target &amp;lt;- function(x,y){
  df &amp;lt;- expand.grid(from=x, to=unlist(y))
  return(df)}

for(i in 1:nrow(test)){
  if(i == 1){
    df_res = df_target(test$Package[i], test$cleaned_imports[i])
  }else{
      df_res = rbind(df_res, df_target(test$Package[i], test$cleaned_imports[i]))
  }
}

links &amp;lt;- df_res %&amp;gt;% 
  filter(!is.na(to) | (to == &amp;quot;&amp;quot;))

nodes &amp;lt;- tibble(id=as.character(unique(unlist(df_res))))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once the two matrices are made, we can interactively visualize the graph network with &lt;em&gt;visNetwork&lt;/em&gt; package:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;visNetwork(nodes, links) %&amp;gt;%
    visIgraphLayout(type = &amp;quot;full&amp;quot;) %&amp;gt;%
    visNodes(
        shape = &amp;quot;dot&amp;quot;,
        color = list(
            background = &amp;quot;#0085AF&amp;quot;,
            border = &amp;quot;#013848&amp;quot;,
            highlight = &amp;quot;#FF8000&amp;quot;
        ),
        scaling = list(min=2,
                       max = 10),
        shadow = list(enabled = TRUE, size = 10)
    ) %&amp;gt;%
    visEdges(
      arrows=&amp;#39;to&amp;#39;,
        shadow = FALSE,
        color = list(color = &amp;quot;#0085AF&amp;quot;, highlight = &amp;quot;#C62F4B&amp;quot;)
    ) %&amp;gt;%
    visOptions(highlightNearest = list(enabled = T, degree = 1, hover = T)) %&amp;gt;% 
    visLayout(randomSeed = 11)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:672px;height:480px;&#34; class=&#34;visNetwork html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;nodes&#34;:{&#34;id&#34;:[&#34;DBI&#34;,&#34;rvest&#34;,&#34;xlsx&#34;,&#34;sp&#34;,&#34;plotly&#34;,&#34;RcppEigen&#34;,&#34;pbkrtest&#34;,&#34;png&#34;,&#34;uuid&#34;,&#34;rematch2&#34;,&#34;dbplyr&#34;,&#34;desc&#34;,&#34;base64enc&#34;,&#34;plyr&#34;,&#34;mime&#34;,&#34;prettyunits&#34;,&#34;readxl&#34;,&#34;highr&#34;,&#34;rprojroot&#34;,&#34;tzdb&#34;,&#34;labeling&#34;,&#34;gtable&#34;,&#34;munsell&#34;,&#34;jquerylib&#34;,&#34;fastmap&#34;,&#34;farver&#34;,&#34;rappdirs&#34;,&#34;tinytex&#34;,&#34;car&#34;,&#34;rstudioapi&#34;,&#34;yaml&#34;,&#34;viridisLite&#34;,&#34;isoband&#34;,&#34;evaluate&#34;,&#34;xml2&#34;,&#34;units&#34;,&#34;hms&#34;,&#34;broom&#34;,&#34;jpeg&#34;,&#34;colorspace&#34;,&#34;lme4&#34;,&#34;generics&#34;,&#34;purrr&#34;,&#34;vroom&#34;,&#34;pkgconfig&#34;,&#34;nloptr&#34;,&#34;readr&#34;,&#34;RColorBrewer&#34;,&#34;htmltools&#34;,&#34;fs&#34;,&#34;utf8&#34;,&#34;rJava&#34;,&#34;testthat&#34;,&#34;digest&#34;,&#34;rmarkdown&#34;,&#34;sass&#34;,&#34;bslib&#34;,&#34;R6&#34;,&#34;xfun&#34;,&#34;lubridate&#34;,&#34;Rcpp&#34;,&#34;scales&#34;,&#34;Hmisc&#34;,&#34;data.table&#34;,&#34;fansi&#34;,&#34;curl&#34;,&#34;openssl&#34;,&#34;zoo&#34;,&#34;ps&#34;,&#34;knitr&#34;,&#34;callr&#34;,&#34;withr&#34;,&#34;tidyverse&#34;,&#34;tidyr&#34;,&#34;tidyselect&#34;,&#34;cpp11&#34;,&#34;crayon&#34;,&#34;pkgdown&#34;,&#34;processx&#34;,&#34;jsonlite&#34;,&#34;ellipsis&#34;,&#34;httr&#34;,&#34;stringi&#34;,&#34;magrittr&#34;,&#34;tibble&#34;,&#34;pillar&#34;,&#34;stringr&#34;,&#34;lifecycle&#34;,&#34;textshaping&#34;,&#34;ragg&#34;,&#34;rgl&#34;,&#34;rgeos&#34;,&#34;vctrs&#34;,&#34;dplyr&#34;,&#34;glue&#34;,&#34;cli&#34;,&#34;sf&#34;,&#34;devtools&#34;,&#34;rlang&#34;,&#34;ggplot2&#34;,null,&#34;selectr&#34;,&#34;xlsxjars&#34;,&#34;grDevices&#34;,&#34;utils&#34;,&#34;stats&#34;,&#34;graphics&#34;,&#34;lattice&#34;,&#34;grid&#34;,&#34;tools&#34;,&#34;htmlwidgets&#34;,&#34;lazyeval&#34;,&#34;crosstalk&#34;,&#34;promises&#34;,&#34;Matrix&#34;,&#34;MASS&#34;,&#34;methods&#34;,&#34;numDeriv&#34;,&#34;parallel&#34;,&#34;assertthat&#34;,&#34;blob&#34;,&#34;cellranger&#34;,&#34;abind&#34;,&#34;mgcv&#34;,&#34;nnet&#34;,&#34;quantreg&#34;,&#34;maptools&#34;,&#34;nlme&#34;,&#34;backports&#34;,&#34;splines&#34;,&#34;boot&#34;,&#34;minqa&#34;,&#34;bit64&#34;,&#34;clipr&#34;,&#34;brio&#34;,&#34;pkgload&#34;,&#34;praise&#34;,&#34;waldo&#34;,&#34;latticeExtra&#34;,&#34;cluster&#34;,&#34;rpart&#34;,&#34;foreign&#34;,&#34;gridExtra&#34;,&#34;htmlTable&#34;,&#34;viridis&#34;,&#34;askpass&#34;,&#34;dtplyr&#34;,&#34;forcats&#34;,&#34;googledrive&#34;,&#34;googlesheets4&#34;,&#34;haven&#34;,&#34;modelr&#34;,&#34;reprex&#34;,&#34;downlit&#34;,&#34;memoise&#34;,&#34;whisker&#34;,&#34;systemfonts&#34;,&#34;classInt&#34;,&#34;s2&#34;,&#34;pkgbuild&#34;,&#34;rcmdcheck&#34;,&#34;remotes&#34;,&#34;roxygen2&#34;,&#34;rversions&#34;,&#34;sessioninfo&#34;],&#34;x&#34;:[-0.265640374113457,0.0919351234915169,-0.313538283909753,-0.125209914975259,-0.130687726541549,-0.261160182310239,-0.213576306950203,-0.921496299423707,0.823576509079461,0.401363560793741,0.0343952166415025,0.220138419708019,-0.0471094225114724,-0.605389581019959,-0.18469163273681,-1,0.327421683615773,-0.519481840196457,0.448478095592973,0.458128022740691,-0.32544223138223,0.0474307724551302,-0.276379018712345,-0.181618981687309,0.185516140236989,-0.499221843098467,0.374478901026912,-0.452421315103628,-0.136610427893402,0.354753620993622,-0.25865315271892,-0.375585510230387,0.0467201313155821,-0.0893256876343737,0.037014433836841,-0.496084377961151,0.228051950836613,-0.0332059589312387,1,-0.256137932091952,-0.258433517689885,-0.0528552391615764,0.0181270515885841,0.184041615795728,0.264878887699682,-0.331092876053806,0.221937311786205,-0.339281092127406,-0.00281845194081531,0.149824374072745,0.498590029912573,-0.518034117007453,0.195855032436977,-0.00713280142276385,-0.168607225868859,0.161738799138957,-0.0499813261964985,0.0549035664771909,-0.342760529763075,0.0476174529572093,-0.31699941076312,-0.199470399593273,0.106170839120062,0.0162029562960091,0.118256648413982,-0.0141193975293067,-0.056218627453942,-0.0732771200462016,0.244129537146483,-0.255489187038783,0.154725384130266,0.0378335548985689,0.156861777371722,0.0490490702336301,0.127092039232811,0.6878880723575,0.0896436621953449,-0.0226241508060434,0.208229524843934,-0.027193268380157,0.18260838294859,0.00596407391338172,-0.192546019182493,-0.0434110644619042,0.11892633578314,0.189741823753756,-0.102290068754438,0.108188718298963,-0.373278801286394,-0.268060044426695,-0.134806088323509,-0.0528547222016786,0.120494941913083,0.00690271894843253,0.0676952275963685,0.187636291354712,-0.272836965068763,0.259871557321509,0.0753358175119891,-0.0136659450516375,0.924862349731352,0.11580497219476,-0.559558703414558,-0.098580239588123,0.00989725493940941,-0.0988831518226019,-0.174372739159415,-0.164855293536632,-0.0983481757117538,-0.144607338932723,-0.346695559150821,-0.399534099350077,-0.32379553392527,-0.375909710088487,-0.421001591145147,-0.199329101253931,-0.00854254475867122,-0.49220229167867,-0.377701752401307,0.102707752303917,-0.032168783647278,0.631497636293809,-0.211597460238755,-0.0156294852441721,-0.00337803247616209,-0.159103750822287,-0.10127432800627,-0.264321303910167,-0.195713881594468,-0.415384344077347,-0.468489469007771,-0.39166283995682,0.405454398267799,0.532412501384695,0.491452613457716,0.427515414321624,0.474065064362968,0.448343003949167,0.242846236256165,0.290936280331647,0.152909906632962,0.232361902185949,0.0957384189491575,0.320837491320162,0.185885548820223,-0.0855977393816687,0.197569489510458,0.313628018417207,0.392154043342617,0.326592738064735,0.261046030480951,0.37318136442892,0.25418993655368,-0.172056956560999,0.204127666958912,-0.110842340995238,-0.424250919731118,-0.573761725319021,-0.575161665740687,0.50966174168059,0.547048220746008,0.576466038515373,0.550845224547599,0.573745153299299,0.5060153588256],&#34;y&#34;:[0.086983054629864,0.303729105824093,-0.491826617265757,-0.464623618405926,0.0882346499580677,-0.337726507282527,-0.258551045113671,0.393284450893538,-0.797264978215484,0.141840207782491,0.143165935424546,0.142255606482713,-0.320433147915143,-0.373484555291716,0.239018883358593,0.0233029849637447,-0.0303633936803824,0.000758488733825446,0.372537346056846,-0.339669705403291,-0.205640685964935,-0.559906243248816,-0.14373628035296,-0.208205576123272,-0.543711416619137,0.186289003920958,-0.488666240678266,0.0263717624322877,-0.603955595714882,0.329337533392529,0.198645657983672,0.175784357738249,-0.45523950663917,-0.112812546492656,0.283874835449589,-0.281870571321332,0.0322685324929355,0.0858722497355131,-0.300019524033997,-0.380591555876124,-0.661374429994843,0.266240791382198,0.217902012930822,-0.119157805640469,-0.167987069211727,-0.953021110986149,-0.0356933611470591,0.231215954181073,-0.25395881294776,-0.0473066718994707,-0.00612943610934868,-0.687032944229302,-0.0753008409121873,-0.0547194606748364,-0.0183826232727234,-0.227873883653408,-0.0930630375623175,0.0298111355140507,-0.0499242201898693,0.504986815943532,-0.272704990700162,0.0465977973714722,-0.638835086428311,-0.322856646987442,-0.249108222083339,0.705921129166347,0.770814541029716,-0.529717508557398,-0.317567288450079,-0.0205125556458257,-0.00433982110515274,-0.119287447721072,0.246643609059751,0.104979561937061,0.157585556134061,-1,-0.0691013646126921,0.206491288079969,-0.192427201497234,0.131453225648297,0.126853694284714,0.361740034613291,-0.0886388230394318,0.0427903206034403,0.0252330202470374,0.00313226766620445,0.125367372449165,0.0776668549553983,0.834854256607462,0.61494737421613,-0.0962892846738419,-0.437171616483578,0.105289970508777,0.0380851433701694,-0.00670330280363607,0.0538676489738759,-0.2057725471939,0.106231899973617,0.0259855628542489,-0.215430381853196,-0.579563562725567,0.672095769270524,-0.619117118352414,-0.320242342586588,-0.195585077131909,-0.230162857221761,-0.384931423518028,-0.723159637080808,-0.505777541052434,0.0355665609702744,0.0658337189516305,0.348439993998183,0.392844084457911,0.311388777223884,-0.419354955453726,-0.498647953257354,-0.0992141552103206,-0.403585608597094,-0.557066367117375,0.501227081891687,0.505466196110768,-0.0912534292238358,-0.913861162478794,-0.597000428411208,-0.829738257722309,-0.940609585491095,-0.92898108300658,-0.827339442100068,0.406187363628545,-0.876674376493306,-0.84055794137501,-0.938187733102079,-0.368211537267794,-0.107177147486428,-0.218365272068922,0.010626064028469,-0.15465873348497,-0.259570451910864,-0.934031279800377,-0.869126322241213,-0.962850542702493,-0.85297053195549,-0.945428521068492,-0.807780303719462,-0.912696492011435,1,0.601812555404227,0.584169981762363,0.471032559364489,0.505752091673919,0.548691890999177,0.540007772678007,0.619200794359893,0.532178020828796,0.36946226139084,0.564719942202167,0.789463073199222,-0.170192731385411,-0.249358419938014,0.32930222421705,0.281094653970826,0.0961392027649308,0.152922107429442,0.210929617688378,0.233086176779567],&#34;label&#34;:[&#34;DBI&#34;,&#34;rvest&#34;,&#34;xlsx&#34;,&#34;sp&#34;,&#34;plotly&#34;,&#34;RcppEigen&#34;,&#34;pbkrtest&#34;,&#34;png&#34;,&#34;uuid&#34;,&#34;rematch2&#34;,&#34;dbplyr&#34;,&#34;desc&#34;,&#34;base64enc&#34;,&#34;plyr&#34;,&#34;mime&#34;,&#34;prettyunits&#34;,&#34;readxl&#34;,&#34;highr&#34;,&#34;rprojroot&#34;,&#34;tzdb&#34;,&#34;labeling&#34;,&#34;gtable&#34;,&#34;munsell&#34;,&#34;jquerylib&#34;,&#34;fastmap&#34;,&#34;farver&#34;,&#34;rappdirs&#34;,&#34;tinytex&#34;,&#34;car&#34;,&#34;rstudioapi&#34;,&#34;yaml&#34;,&#34;viridisLite&#34;,&#34;isoband&#34;,&#34;evaluate&#34;,&#34;xml2&#34;,&#34;units&#34;,&#34;hms&#34;,&#34;broom&#34;,&#34;jpeg&#34;,&#34;colorspace&#34;,&#34;lme4&#34;,&#34;generics&#34;,&#34;purrr&#34;,&#34;vroom&#34;,&#34;pkgconfig&#34;,&#34;nloptr&#34;,&#34;readr&#34;,&#34;RColorBrewer&#34;,&#34;htmltools&#34;,&#34;fs&#34;,&#34;utf8&#34;,&#34;rJava&#34;,&#34;testthat&#34;,&#34;digest&#34;,&#34;rmarkdown&#34;,&#34;sass&#34;,&#34;bslib&#34;,&#34;R6&#34;,&#34;xfun&#34;,&#34;lubridate&#34;,&#34;Rcpp&#34;,&#34;scales&#34;,&#34;Hmisc&#34;,&#34;data.table&#34;,&#34;fansi&#34;,&#34;curl&#34;,&#34;openssl&#34;,&#34;zoo&#34;,&#34;ps&#34;,&#34;knitr&#34;,&#34;callr&#34;,&#34;withr&#34;,&#34;tidyverse&#34;,&#34;tidyr&#34;,&#34;tidyselect&#34;,&#34;cpp11&#34;,&#34;crayon&#34;,&#34;pkgdown&#34;,&#34;processx&#34;,&#34;jsonlite&#34;,&#34;ellipsis&#34;,&#34;httr&#34;,&#34;stringi&#34;,&#34;magrittr&#34;,&#34;tibble&#34;,&#34;pillar&#34;,&#34;stringr&#34;,&#34;lifecycle&#34;,&#34;textshaping&#34;,&#34;ragg&#34;,&#34;rgl&#34;,&#34;rgeos&#34;,&#34;vctrs&#34;,&#34;dplyr&#34;,&#34;glue&#34;,&#34;cli&#34;,&#34;sf&#34;,&#34;devtools&#34;,&#34;rlang&#34;,&#34;ggplot2&#34;,null,&#34;selectr&#34;,&#34;xlsxjars&#34;,&#34;grDevices&#34;,&#34;utils&#34;,&#34;stats&#34;,&#34;graphics&#34;,&#34;lattice&#34;,&#34;grid&#34;,&#34;tools&#34;,&#34;htmlwidgets&#34;,&#34;lazyeval&#34;,&#34;crosstalk&#34;,&#34;promises&#34;,&#34;Matrix&#34;,&#34;MASS&#34;,&#34;methods&#34;,&#34;numDeriv&#34;,&#34;parallel&#34;,&#34;assertthat&#34;,&#34;blob&#34;,&#34;cellranger&#34;,&#34;abind&#34;,&#34;mgcv&#34;,&#34;nnet&#34;,&#34;quantreg&#34;,&#34;maptools&#34;,&#34;nlme&#34;,&#34;backports&#34;,&#34;splines&#34;,&#34;boot&#34;,&#34;minqa&#34;,&#34;bit64&#34;,&#34;clipr&#34;,&#34;brio&#34;,&#34;pkgload&#34;,&#34;praise&#34;,&#34;waldo&#34;,&#34;latticeExtra&#34;,&#34;cluster&#34;,&#34;rpart&#34;,&#34;foreign&#34;,&#34;gridExtra&#34;,&#34;htmlTable&#34;,&#34;viridis&#34;,&#34;askpass&#34;,&#34;dtplyr&#34;,&#34;forcats&#34;,&#34;googledrive&#34;,&#34;googlesheets4&#34;,&#34;haven&#34;,&#34;modelr&#34;,&#34;reprex&#34;,&#34;downlit&#34;,&#34;memoise&#34;,&#34;whisker&#34;,&#34;systemfonts&#34;,&#34;classInt&#34;,&#34;s2&#34;,&#34;pkgbuild&#34;,&#34;rcmdcheck&#34;,&#34;remotes&#34;,&#34;roxygen2&#34;,&#34;rversions&#34;,&#34;sessioninfo&#34;]},&#34;edges&#34;:{&#34;from&#34;:[&#34;rvest&#34;,&#34;rvest&#34;,&#34;rvest&#34;,&#34;rvest&#34;,&#34;rvest&#34;,&#34;rvest&#34;,&#34;rvest&#34;,&#34;xlsx&#34;,&#34;xlsx&#34;,&#34;xlsx&#34;,&#34;xlsx&#34;,&#34;sp&#34;,&#34;sp&#34;,&#34;sp&#34;,&#34;sp&#34;,&#34;sp&#34;,&#34;sp&#34;,&#34;plotly&#34;,&#34;plotly&#34;,&#34;plotly&#34;,&#34;plotly&#34;,&#34;plotly&#34;,&#34;plotly&#34;,&#34;plotly&#34;,&#34;plotly&#34;,&#34;plotly&#34;,&#34;plotly&#34;,&#34;plotly&#34;,&#34;plotly&#34;,&#34;plotly&#34;,&#34;plotly&#34;,&#34;plotly&#34;,&#34;plotly&#34;,&#34;plotly&#34;,&#34;plotly&#34;,&#34;plotly&#34;,&#34;plotly&#34;,&#34;plotly&#34;,&#34;RcppEigen&#34;,&#34;RcppEigen&#34;,&#34;RcppEigen&#34;,&#34;RcppEigen&#34;,&#34;pbkrtest&#34;,&#34;pbkrtest&#34;,&#34;pbkrtest&#34;,&#34;pbkrtest&#34;,&#34;pbkrtest&#34;,&#34;pbkrtest&#34;,&#34;pbkrtest&#34;,&#34;pbkrtest&#34;,&#34;pbkrtest&#34;,&#34;rematch2&#34;,&#34;dbplyr&#34;,&#34;dbplyr&#34;,&#34;dbplyr&#34;,&#34;dbplyr&#34;,&#34;dbplyr&#34;,&#34;dbplyr&#34;,&#34;dbplyr&#34;,&#34;dbplyr&#34;,&#34;dbplyr&#34;,&#34;dbplyr&#34;,&#34;dbplyr&#34;,&#34;dbplyr&#34;,&#34;dbplyr&#34;,&#34;dbplyr&#34;,&#34;dbplyr&#34;,&#34;dbplyr&#34;,&#34;dbplyr&#34;,&#34;dbplyr&#34;,&#34;desc&#34;,&#34;desc&#34;,&#34;desc&#34;,&#34;desc&#34;,&#34;plyr&#34;,&#34;mime&#34;,&#34;readxl&#34;,&#34;readxl&#34;,&#34;readxl&#34;,&#34;highr&#34;,&#34;labeling&#34;,&#34;labeling&#34;,&#34;gtable&#34;,&#34;munsell&#34;,&#34;munsell&#34;,&#34;jquerylib&#34;,&#34;tinytex&#34;,&#34;car&#34;,&#34;car&#34;,&#34;car&#34;,&#34;car&#34;,&#34;car&#34;,&#34;car&#34;,&#34;car&#34;,&#34;car&#34;,&#34;car&#34;,&#34;car&#34;,&#34;car&#34;,&#34;car&#34;,&#34;car&#34;,&#34;isoband&#34;,&#34;isoband&#34;,&#34;evaluate&#34;,&#34;xml2&#34;,&#34;units&#34;,&#34;hms&#34;,&#34;hms&#34;,&#34;hms&#34;,&#34;hms&#34;,&#34;hms&#34;,&#34;hms&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;colorspace&#34;,&#34;colorspace&#34;,&#34;colorspace&#34;,&#34;lme4&#34;,&#34;lme4&#34;,&#34;lme4&#34;,&#34;lme4&#34;,&#34;lme4&#34;,&#34;lme4&#34;,&#34;lme4&#34;,&#34;lme4&#34;,&#34;lme4&#34;,&#34;lme4&#34;,&#34;lme4&#34;,&#34;generics&#34;,&#34;purrr&#34;,&#34;purrr&#34;,&#34;vroom&#34;,&#34;vroom&#34;,&#34;vroom&#34;,&#34;vroom&#34;,&#34;vroom&#34;,&#34;vroom&#34;,&#34;vroom&#34;,&#34;vroom&#34;,&#34;vroom&#34;,&#34;vroom&#34;,&#34;vroom&#34;,&#34;vroom&#34;,&#34;vroom&#34;,&#34;vroom&#34;,&#34;pkgconfig&#34;,&#34;readr&#34;,&#34;readr&#34;,&#34;readr&#34;,&#34;readr&#34;,&#34;readr&#34;,&#34;readr&#34;,&#34;readr&#34;,&#34;readr&#34;,&#34;readr&#34;,&#34;readr&#34;,&#34;readr&#34;,&#34;htmltools&#34;,&#34;htmltools&#34;,&#34;htmltools&#34;,&#34;htmltools&#34;,&#34;htmltools&#34;,&#34;htmltools&#34;,&#34;fs&#34;,&#34;testthat&#34;,&#34;testthat&#34;,&#34;testthat&#34;,&#34;testthat&#34;,&#34;testthat&#34;,&#34;testthat&#34;,&#34;testthat&#34;,&#34;testthat&#34;,&#34;testthat&#34;,&#34;testthat&#34;,&#34;testthat&#34;,&#34;testthat&#34;,&#34;testthat&#34;,&#34;testthat&#34;,&#34;testthat&#34;,&#34;testthat&#34;,&#34;testthat&#34;,&#34;testthat&#34;,&#34;testthat&#34;,&#34;testthat&#34;,&#34;testthat&#34;,&#34;digest&#34;,&#34;rmarkdown&#34;,&#34;rmarkdown&#34;,&#34;rmarkdown&#34;,&#34;rmarkdown&#34;,&#34;rmarkdown&#34;,&#34;rmarkdown&#34;,&#34;rmarkdown&#34;,&#34;rmarkdown&#34;,&#34;rmarkdown&#34;,&#34;rmarkdown&#34;,&#34;rmarkdown&#34;,&#34;rmarkdown&#34;,&#34;rmarkdown&#34;,&#34;sass&#34;,&#34;sass&#34;,&#34;sass&#34;,&#34;sass&#34;,&#34;sass&#34;,&#34;bslib&#34;,&#34;bslib&#34;,&#34;bslib&#34;,&#34;bslib&#34;,&#34;bslib&#34;,&#34;bslib&#34;,&#34;xfun&#34;,&#34;xfun&#34;,&#34;lubridate&#34;,&#34;Rcpp&#34;,&#34;Rcpp&#34;,&#34;scales&#34;,&#34;scales&#34;,&#34;scales&#34;,&#34;scales&#34;,&#34;scales&#34;,&#34;scales&#34;,&#34;scales&#34;,&#34;scales&#34;,&#34;Hmisc&#34;,&#34;Hmisc&#34;,&#34;Hmisc&#34;,&#34;Hmisc&#34;,&#34;Hmisc&#34;,&#34;Hmisc&#34;,&#34;Hmisc&#34;,&#34;Hmisc&#34;,&#34;Hmisc&#34;,&#34;Hmisc&#34;,&#34;Hmisc&#34;,&#34;Hmisc&#34;,&#34;Hmisc&#34;,&#34;Hmisc&#34;,&#34;data.table&#34;,&#34;fansi&#34;,&#34;fansi&#34;,&#34;openssl&#34;,&#34;zoo&#34;,&#34;zoo&#34;,&#34;zoo&#34;,&#34;zoo&#34;,&#34;ps&#34;,&#34;knitr&#34;,&#34;knitr&#34;,&#34;knitr&#34;,&#34;knitr&#34;,&#34;knitr&#34;,&#34;knitr&#34;,&#34;knitr&#34;,&#34;callr&#34;,&#34;callr&#34;,&#34;callr&#34;,&#34;withr&#34;,&#34;withr&#34;,&#34;withr&#34;,&#34;tidyverse&#34;,&#34;tidyverse&#34;,&#34;tidyverse&#34;,&#34;tidyverse&#34;,&#34;tidyverse&#34;,&#34;tidyverse&#34;,&#34;tidyverse&#34;,&#34;tidyverse&#34;,&#34;tidyverse&#34;,&#34;tidyverse&#34;,&#34;tidyverse&#34;,&#34;tidyverse&#34;,&#34;tidyverse&#34;,&#34;tidyverse&#34;,&#34;tidyverse&#34;,&#34;tidyverse&#34;,&#34;tidyverse&#34;,&#34;tidyverse&#34;,&#34;tidyverse&#34;,&#34;tidyverse&#34;,&#34;tidyverse&#34;,&#34;tidyverse&#34;,&#34;tidyverse&#34;,&#34;tidyverse&#34;,&#34;tidyverse&#34;,&#34;tidyverse&#34;,&#34;tidyverse&#34;,&#34;tidyverse&#34;,&#34;tidyverse&#34;,&#34;tidyr&#34;,&#34;tidyr&#34;,&#34;tidyr&#34;,&#34;tidyr&#34;,&#34;tidyr&#34;,&#34;tidyr&#34;,&#34;tidyr&#34;,&#34;tidyr&#34;,&#34;tidyr&#34;,&#34;tidyr&#34;,&#34;tidyr&#34;,&#34;tidyselect&#34;,&#34;tidyselect&#34;,&#34;tidyselect&#34;,&#34;tidyselect&#34;,&#34;tidyselect&#34;,&#34;crayon&#34;,&#34;crayon&#34;,&#34;crayon&#34;,&#34;pkgdown&#34;,&#34;pkgdown&#34;,&#34;pkgdown&#34;,&#34;pkgdown&#34;,&#34;pkgdown&#34;,&#34;pkgdown&#34;,&#34;pkgdown&#34;,&#34;pkgdown&#34;,&#34;pkgdown&#34;,&#34;pkgdown&#34;,&#34;pkgdown&#34;,&#34;pkgdown&#34;,&#34;pkgdown&#34;,&#34;pkgdown&#34;,&#34;pkgdown&#34;,&#34;pkgdown&#34;,&#34;pkgdown&#34;,&#34;pkgdown&#34;,&#34;pkgdown&#34;,&#34;pkgdown&#34;,&#34;processx&#34;,&#34;processx&#34;,&#34;processx&#34;,&#34;ellipsis&#34;,&#34;httr&#34;,&#34;httr&#34;,&#34;httr&#34;,&#34;httr&#34;,&#34;httr&#34;,&#34;stringi&#34;,&#34;stringi&#34;,&#34;stringi&#34;,&#34;tibble&#34;,&#34;tibble&#34;,&#34;tibble&#34;,&#34;tibble&#34;,&#34;tibble&#34;,&#34;tibble&#34;,&#34;tibble&#34;,&#34;tibble&#34;,&#34;tibble&#34;,&#34;tibble&#34;,&#34;pillar&#34;,&#34;pillar&#34;,&#34;pillar&#34;,&#34;pillar&#34;,&#34;pillar&#34;,&#34;pillar&#34;,&#34;pillar&#34;,&#34;pillar&#34;,&#34;pillar&#34;,&#34;pillar&#34;,&#34;stringr&#34;,&#34;stringr&#34;,&#34;stringr&#34;,&#34;lifecycle&#34;,&#34;lifecycle&#34;,&#34;textshaping&#34;,&#34;ragg&#34;,&#34;ragg&#34;,&#34;rgl&#34;,&#34;rgl&#34;,&#34;rgl&#34;,&#34;rgl&#34;,&#34;rgl&#34;,&#34;rgl&#34;,&#34;rgl&#34;,&#34;rgl&#34;,&#34;rgl&#34;,&#34;rgl&#34;,&#34;rgl&#34;,&#34;rgl&#34;,&#34;rgeos&#34;,&#34;rgeos&#34;,&#34;rgeos&#34;,&#34;vctrs&#34;,&#34;vctrs&#34;,&#34;vctrs&#34;,&#34;dplyr&#34;,&#34;dplyr&#34;,&#34;dplyr&#34;,&#34;dplyr&#34;,&#34;dplyr&#34;,&#34;dplyr&#34;,&#34;dplyr&#34;,&#34;dplyr&#34;,&#34;dplyr&#34;,&#34;dplyr&#34;,&#34;dplyr&#34;,&#34;dplyr&#34;,&#34;glue&#34;,&#34;cli&#34;,&#34;cli&#34;,&#34;sf&#34;,&#34;sf&#34;,&#34;sf&#34;,&#34;sf&#34;,&#34;sf&#34;,&#34;sf&#34;,&#34;sf&#34;,&#34;sf&#34;,&#34;sf&#34;,&#34;sf&#34;,&#34;sf&#34;,&#34;sf&#34;,&#34;devtools&#34;,&#34;devtools&#34;,&#34;devtools&#34;,&#34;devtools&#34;,&#34;devtools&#34;,&#34;devtools&#34;,&#34;devtools&#34;,&#34;devtools&#34;,&#34;devtools&#34;,&#34;devtools&#34;,&#34;devtools&#34;,&#34;devtools&#34;,&#34;devtools&#34;,&#34;devtools&#34;,&#34;devtools&#34;,&#34;devtools&#34;,&#34;devtools&#34;,&#34;devtools&#34;,&#34;devtools&#34;,&#34;devtools&#34;,&#34;devtools&#34;,&#34;devtools&#34;,&#34;rlang&#34;,&#34;ggplot2&#34;,&#34;ggplot2&#34;,&#34;ggplot2&#34;,&#34;ggplot2&#34;,&#34;ggplot2&#34;,&#34;ggplot2&#34;,&#34;ggplot2&#34;,&#34;ggplot2&#34;,&#34;ggplot2&#34;,&#34;ggplot2&#34;,&#34;ggplot2&#34;,&#34;ggplot2&#34;,&#34;ggplot2&#34;],&#34;to&#34;:[&#34;httr&#34;,&#34;lifecycle&#34;,&#34;magrittr&#34;,&#34;rlang&#34;,&#34;selectr&#34;,&#34;tibble&#34;,&#34;xml2&#34;,&#34;rJava&#34;,&#34;xlsxjars&#34;,&#34;grDevices&#34;,&#34;utils&#34;,&#34;utils&#34;,&#34;stats&#34;,&#34;graphics&#34;,&#34;grDevices&#34;,&#34;lattice&#34;,&#34;grid&#34;,&#34;tools&#34;,&#34;scales&#34;,&#34;httr&#34;,&#34;jsonlite&#34;,&#34;magrittr&#34;,&#34;digest&#34;,&#34;viridisLite&#34;,&#34;base64enc&#34;,&#34;htmltools&#34;,&#34;htmlwidgets&#34;,&#34;tidyr&#34;,&#34;RColorBrewer&#34;,&#34;dplyr&#34;,&#34;vctrs&#34;,&#34;tibble&#34;,&#34;lazyeval&#34;,&#34;rlang&#34;,&#34;crosstalk&#34;,&#34;purrr&#34;,&#34;data.table&#34;,&#34;promises&#34;,&#34;Matrix&#34;,&#34;Rcpp&#34;,&#34;stats&#34;,&#34;utils&#34;,&#34;broom&#34;,&#34;dplyr&#34;,&#34;magrittr&#34;,&#34;MASS&#34;,&#34;Matrix&#34;,&#34;methods&#34;,&#34;numDeriv&#34;,&#34;parallel&#34;,&#34;knitr&#34;,&#34;tibble&#34;,&#34;assertthat&#34;,&#34;blob&#34;,&#34;cli&#34;,&#34;DBI&#34;,&#34;dplyr&#34;,&#34;glue&#34;,&#34;lifecycle&#34;,&#34;magrittr&#34;,&#34;methods&#34;,&#34;pillar&#34;,&#34;purrr&#34;,&#34;R6&#34;,&#34;rlang&#34;,&#34;tibble&#34;,&#34;tidyselect&#34;,&#34;utils&#34;,&#34;vctrs&#34;,&#34;withr&#34;,&#34;cli&#34;,&#34;R6&#34;,&#34;rprojroot&#34;,&#34;utils&#34;,&#34;Rcpp&#34;,&#34;tools&#34;,&#34;cellranger&#34;,&#34;tibble&#34;,&#34;utils&#34;,&#34;xfun&#34;,&#34;stats&#34;,&#34;graphics&#34;,&#34;grid&#34;,&#34;colorspace&#34;,&#34;methods&#34;,&#34;htmltools&#34;,&#34;xfun&#34;,&#34;abind&#34;,&#34;MASS&#34;,&#34;mgcv&#34;,&#34;nnet&#34;,&#34;pbkrtest&#34;,&#34;quantreg&#34;,&#34;grDevices&#34;,&#34;utils&#34;,&#34;stats&#34;,&#34;graphics&#34;,&#34;maptools&#34;,&#34;lme4&#34;,&#34;nlme&#34;,&#34;grid&#34;,&#34;utils&#34;,&#34;methods&#34;,&#34;methods&#34;,&#34;Rcpp&#34;,&#34;ellipsis&#34;,&#34;lifecycle&#34;,&#34;methods&#34;,&#34;pkgconfig&#34;,&#34;rlang&#34;,&#34;vctrs&#34;,&#34;backports&#34;,&#34;dplyr&#34;,&#34;ellipsis&#34;,&#34;generics&#34;,&#34;glue&#34;,&#34;methods&#34;,&#34;purrr&#34;,&#34;rlang&#34;,&#34;stringr&#34;,&#34;tibble&#34;,&#34;tidyr&#34;,&#34;ggplot2&#34;,&#34;graphics&#34;,&#34;grDevices&#34;,&#34;stats&#34;,&#34;graphics&#34;,&#34;grid&#34;,&#34;splines&#34;,&#34;utils&#34;,&#34;parallel&#34;,&#34;MASS&#34;,&#34;lattice&#34;,&#34;boot&#34;,&#34;nlme&#34;,&#34;minqa&#34;,&#34;nloptr&#34;,&#34;methods&#34;,&#34;magrittr&#34;,&#34;rlang&#34;,&#34;bit64&#34;,&#34;crayon&#34;,&#34;cli&#34;,&#34;glue&#34;,&#34;hms&#34;,&#34;lifecycle&#34;,&#34;methods&#34;,&#34;rlang&#34;,&#34;stats&#34;,&#34;tibble&#34;,&#34;tzdb&#34;,&#34;vctrs&#34;,&#34;tidyselect&#34;,&#34;withr&#34;,&#34;utils&#34;,&#34;cli&#34;,&#34;clipr&#34;,&#34;crayon&#34;,&#34;hms&#34;,&#34;lifecycle&#34;,&#34;methods&#34;,&#34;R6&#34;,&#34;rlang&#34;,&#34;tibble&#34;,&#34;utils&#34;,&#34;vroom&#34;,&#34;utils&#34;,&#34;digest&#34;,&#34;grDevices&#34;,&#34;base64enc&#34;,&#34;rlang&#34;,&#34;fastmap&#34;,&#34;methods&#34;,&#34;brio&#34;,&#34;callr&#34;,&#34;cli&#34;,&#34;crayon&#34;,&#34;desc&#34;,&#34;digest&#34;,&#34;ellipsis&#34;,&#34;evaluate&#34;,&#34;jsonlite&#34;,&#34;lifecycle&#34;,&#34;magrittr&#34;,&#34;methods&#34;,&#34;pkgload&#34;,&#34;praise&#34;,&#34;processx&#34;,&#34;ps&#34;,&#34;R6&#34;,&#34;rlang&#34;,&#34;utils&#34;,&#34;waldo&#34;,&#34;withr&#34;,&#34;utils&#34;,&#34;bslib&#34;,&#34;evaluate&#34;,&#34;htmltools&#34;,&#34;jquerylib&#34;,&#34;jsonlite&#34;,&#34;knitr&#34;,&#34;methods&#34;,&#34;stringr&#34;,&#34;tinytex&#34;,&#34;tools&#34;,&#34;utils&#34;,&#34;xfun&#34;,&#34;yaml&#34;,&#34;fs&#34;,&#34;rlang&#34;,&#34;htmltools&#34;,&#34;R6&#34;,&#34;rappdirs&#34;,&#34;grDevices&#34;,&#34;htmltools&#34;,&#34;jsonlite&#34;,&#34;sass&#34;,&#34;jquerylib&#34;,&#34;rlang&#34;,&#34;stats&#34;,&#34;tools&#34;,&#34;generics&#34;,&#34;methods&#34;,&#34;utils&#34;,&#34;farver&#34;,&#34;labeling&#34;,&#34;lifecycle&#34;,&#34;munsell&#34;,&#34;R6&#34;,&#34;RColorBrewer&#34;,&#34;rlang&#34;,&#34;viridisLite&#34;,&#34;methods&#34;,&#34;latticeExtra&#34;,&#34;cluster&#34;,&#34;rpart&#34;,&#34;nnet&#34;,&#34;foreign&#34;,&#34;gtable&#34;,&#34;grid&#34;,&#34;gridExtra&#34;,&#34;data.table&#34;,&#34;htmlTable&#34;,&#34;viridis&#34;,&#34;htmltools&#34;,&#34;base64enc&#34;,&#34;methods&#34;,&#34;grDevices&#34;,&#34;utils&#34;,&#34;askpass&#34;,&#34;utils&#34;,&#34;graphics&#34;,&#34;grDevices&#34;,&#34;lattice&#34;,&#34;utils&#34;,&#34;evaluate&#34;,&#34;highr&#34;,&#34;methods&#34;,&#34;stringr&#34;,&#34;yaml&#34;,&#34;xfun&#34;,&#34;tools&#34;,&#34;processx&#34;,&#34;R6&#34;,&#34;utils&#34;,&#34;graphics&#34;,&#34;grDevices&#34;,&#34;stats&#34;,&#34;broom&#34;,&#34;cli&#34;,&#34;crayon&#34;,&#34;dbplyr&#34;,&#34;dplyr&#34;,&#34;dtplyr&#34;,&#34;forcats&#34;,&#34;googledrive&#34;,&#34;googlesheets4&#34;,&#34;ggplot2&#34;,&#34;haven&#34;,&#34;hms&#34;,&#34;httr&#34;,&#34;jsonlite&#34;,&#34;lubridate&#34;,&#34;magrittr&#34;,&#34;modelr&#34;,&#34;pillar&#34;,&#34;purrr&#34;,&#34;readr&#34;,&#34;readxl&#34;,&#34;reprex&#34;,&#34;rlang&#34;,&#34;rstudioapi&#34;,&#34;rvest&#34;,&#34;stringr&#34;,&#34;tibble&#34;,&#34;tidyr&#34;,&#34;xml2&#34;,&#34;dplyr&#34;,&#34;ellipsis&#34;,&#34;glue&#34;,&#34;lifecycle&#34;,&#34;magrittr&#34;,&#34;purrr&#34;,&#34;rlang&#34;,&#34;tibble&#34;,&#34;tidyselect&#34;,&#34;utils&#34;,&#34;vctrs&#34;,&#34;ellipsis&#34;,&#34;glue&#34;,&#34;purrr&#34;,&#34;rlang&#34;,&#34;vctrs&#34;,&#34;grDevices&#34;,&#34;methods&#34;,&#34;utils&#34;,&#34;bslib&#34;,&#34;callr&#34;,&#34;crayon&#34;,&#34;desc&#34;,&#34;digest&#34;,&#34;downlit&#34;,&#34;fs&#34;,&#34;httr&#34;,&#34;jsonlite&#34;,&#34;magrittr&#34;,&#34;memoise&#34;,&#34;purrr&#34;,&#34;ragg&#34;,&#34;rlang&#34;,&#34;rmarkdown&#34;,&#34;tibble&#34;,&#34;whisker&#34;,&#34;withr&#34;,&#34;xml2&#34;,&#34;yaml&#34;,&#34;ps&#34;,&#34;R6&#34;,&#34;utils&#34;,&#34;rlang&#34;,&#34;curl&#34;,&#34;jsonlite&#34;,&#34;mime&#34;,&#34;openssl&#34;,&#34;R6&#34;,&#34;tools&#34;,&#34;utils&#34;,&#34;stats&#34;,&#34;ellipsis&#34;,&#34;fansi&#34;,&#34;lifecycle&#34;,&#34;magrittr&#34;,&#34;methods&#34;,&#34;pillar&#34;,&#34;pkgconfig&#34;,&#34;rlang&#34;,&#34;utils&#34;,&#34;vctrs&#34;,&#34;cli&#34;,&#34;crayon&#34;,&#34;ellipsis&#34;,&#34;fansi&#34;,&#34;glue&#34;,&#34;lifecycle&#34;,&#34;rlang&#34;,&#34;utf8&#34;,&#34;utils&#34;,&#34;vctrs&#34;,&#34;glue&#34;,&#34;magrittr&#34;,&#34;stringi&#34;,&#34;glue&#34;,&#34;rlang&#34;,&#34;systemfonts&#34;,&#34;systemfonts&#34;,&#34;textshaping&#34;,&#34;graphics&#34;,&#34;grDevices&#34;,&#34;stats&#34;,&#34;utils&#34;,&#34;htmlwidgets&#34;,&#34;htmltools&#34;,&#34;knitr&#34;,&#34;jsonlite&#34;,&#34;magrittr&#34;,&#34;R6&#34;,&#34;base64enc&#34;,&#34;mime&#34;,&#34;utils&#34;,&#34;stats&#34;,&#34;graphics&#34;,&#34;cli&#34;,&#34;glue&#34;,&#34;rlang&#34;,&#34;generics&#34;,&#34;glue&#34;,&#34;lifecycle&#34;,&#34;magrittr&#34;,&#34;methods&#34;,&#34;R6&#34;,&#34;rlang&#34;,&#34;tibble&#34;,&#34;tidyselect&#34;,&#34;utils&#34;,&#34;vctrs&#34;,&#34;pillar&#34;,&#34;methods&#34;,&#34;glue&#34;,&#34;utils&#34;,&#34;classInt&#34;,&#34;DBI&#34;,&#34;graphics&#34;,&#34;grDevices&#34;,&#34;grid&#34;,&#34;magrittr&#34;,&#34;Rcpp&#34;,&#34;s2&#34;,&#34;stats&#34;,&#34;tools&#34;,&#34;units&#34;,&#34;utils&#34;,&#34;callr&#34;,&#34;cli&#34;,&#34;desc&#34;,&#34;ellipsis&#34;,&#34;fs&#34;,&#34;httr&#34;,&#34;lifecycle&#34;,&#34;memoise&#34;,&#34;pkgbuild&#34;,&#34;pkgload&#34;,&#34;rcmdcheck&#34;,&#34;remotes&#34;,&#34;rlang&#34;,&#34;roxygen2&#34;,&#34;rstudioapi&#34;,&#34;rversions&#34;,&#34;sessioninfo&#34;,&#34;stats&#34;,&#34;testthat&#34;,&#34;tools&#34;,&#34;utils&#34;,&#34;withr&#34;,&#34;utils&#34;,&#34;digest&#34;,&#34;glue&#34;,&#34;grDevices&#34;,&#34;grid&#34;,&#34;gtable&#34;,&#34;isoband&#34;,&#34;MASS&#34;,&#34;mgcv&#34;,&#34;rlang&#34;,&#34;scales&#34;,&#34;stats&#34;,&#34;tibble&#34;,&#34;withr&#34;]},&#34;nodesToDataframe&#34;:true,&#34;edgesToDataframe&#34;:true,&#34;options&#34;:{&#34;width&#34;:&#34;100%&#34;,&#34;height&#34;:&#34;100%&#34;,&#34;nodes&#34;:{&#34;physics&#34;:false,&#34;shape&#34;:&#34;dot&#34;,&#34;color&#34;:{&#34;background&#34;:&#34;#0085AF&#34;,&#34;border&#34;:&#34;#013848&#34;,&#34;highlight&#34;:&#34;#FF8000&#34;},&#34;shadow&#34;:{&#34;enabled&#34;:true,&#34;size&#34;:10},&#34;scaling&#34;:{&#34;min&#34;:2,&#34;max&#34;:10}},&#34;manipulation&#34;:{&#34;enabled&#34;:false},&#34;edges&#34;:{&#34;smooth&#34;:false,&#34;arrows&#34;:&#34;to&#34;,&#34;color&#34;:{&#34;color&#34;:&#34;#0085AF&#34;,&#34;highlight&#34;:&#34;#C62F4B&#34;},&#34;shadow&#34;:false},&#34;physics&#34;:{&#34;stabilization&#34;:false},&#34;interaction&#34;:{&#34;hover&#34;:true,&#34;zoomSpeed&#34;:1},&#34;layout&#34;:{&#34;randomSeed&#34;:11}},&#34;groups&#34;:null,&#34;width&#34;:null,&#34;height&#34;:null,&#34;idselection&#34;:{&#34;enabled&#34;:false,&#34;style&#34;:&#34;width: 150px; height: 26px&#34;,&#34;useLabels&#34;:true,&#34;main&#34;:&#34;Select by id&#34;},&#34;byselection&#34;:{&#34;enabled&#34;:false,&#34;style&#34;:&#34;width: 150px; height: 26px&#34;,&#34;multiple&#34;:false,&#34;hideColor&#34;:&#34;rgba(200,200,200,0.5)&#34;,&#34;highlight&#34;:false},&#34;main&#34;:null,&#34;submain&#34;:null,&#34;footer&#34;:null,&#34;background&#34;:&#34;rgba(0, 0, 0, 0)&#34;,&#34;igraphlayout&#34;:{&#34;type&#34;:&#34;full&#34;},&#34;tooltipStay&#34;:300,&#34;tooltipStyle&#34;:&#34;position: fixed;visibility:hidden;padding: 5px;white-space: nowrap;font-family: verdana;font-size:14px;font-color:#000000;background-color: #f5f4ed;-moz-border-radius: 3px;-webkit-border-radius: 3px;border-radius: 3px;border: 1px solid #808074;box-shadow: 3px 3px 10px rgba(0, 0, 0, 0.2);&#34;,&#34;highlight&#34;:{&#34;enabled&#34;:true,&#34;hoverNearest&#34;:true,&#34;degree&#34;:1,&#34;algorithm&#34;:&#34;all&#34;,&#34;hideColor&#34;:&#34;rgba(200,200,200,0.5)&#34;,&#34;labelOnly&#34;:true},&#34;collapse&#34;:{&#34;enabled&#34;:false,&#34;fit&#34;:false,&#34;resetHighlight&#34;:true,&#34;clusterOptions&#34;:null,&#34;keepCoord&#34;:true,&#34;labelSuffix&#34;:&#34;(cluster)&#34;}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;Do not hesitate to move, zoom in or select packages to see their dependencies !&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Coastal risks and statistical learning: Analyzing Google trends with gtrendsR package</title>
      <link>https://aureliencallens.github.io/2021/03/03/coastal-risks-google-trends/</link>
      <pubDate>Wed, 03 Mar 2021 00:00:00 +0000</pubDate>
      <author>aurelien.callens@gmail.com (Aurelien Callens)</author>
      <guid>https://aureliencallens.github.io/2021/03/03/coastal-risks-google-trends/</guid>
      <description>


&lt;p&gt;I am currently in my third year of PhD and it is time for me to synthesize all the work I have done by writing my thesis. One important step is the introduction which presents the general context and the contributions of my thesis in the research world. For my introduction, I decided to include the Google trend analysis of specific terms related to my PhD subject. For information, the aim of my PhD is to demonstrate the potential contributions of statistical learning methods in the study of coastal risk.&lt;/p&gt;
&lt;p&gt;In this short post, we are going to use the R package &lt;code&gt;gtrendsR&lt;/code&gt; to analyze the trends of specific words related to statistical learning such as “machine learning” or “data science” and also related to coastal risks: “coastal flood”, “storm surge”.&lt;/p&gt;
&lt;div id=&#34;analysis-of-specific-terms-for-the-whole-world&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Analysis of specific terms for the whole world&lt;/h2&gt;
&lt;p&gt;In this first section, we are going to analyze the interest over time for several terms in the whole world. The &lt;code&gt;gtrends&lt;/code&gt; function extracts the “hits” variable for a given term. This variable is a normalized measure of the interest made by Google Trends. The number of search is normalized by geography and time range, then the resulting numbers are scaled on a range of 0 to 100 based on a topic’s proportion to all searches on all topics. All the details are given in the support of Google Trends (&lt;a href=&#34;https://support.google.com/trends/answer/4365533?hl=en&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;We can look at the interest over time for “data science”, “deep learning” and “machine learning”:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(gtrendsR)

words_stats &amp;lt;- c(&amp;quot;machine learning&amp;quot;,
           &amp;quot;deep learning&amp;quot;,
           &amp;quot;data science&amp;quot;)

res_stats &amp;lt;- lapply(words_stats, function(x){
  gtrends(x,
          geo = &amp;quot;&amp;quot;,
          time = &amp;quot;all&amp;quot;)})


interest_stats &amp;lt;- do.call(&amp;quot;rbind&amp;quot;, 
                    lapply(res_stats, function(x){x$interest_over_time}))

interest_stats %&amp;gt;% 
  mutate(hits = as.numeric(ifelse(hits == &amp;quot;&amp;lt;1&amp;quot;, 0, hits))) %&amp;gt;% 
  ggplot(aes(x = date, y = hits)) + 
  geom_line() + 
  facet_grid(~ keyword) +
  theme_bw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://aureliencallens.github.io/post/2021-03-01-coastal-risks-google-trends.en_files/figure-html/unnamed-chunk-1-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;From this figure, we see the increasing interest for these terms over the last decade.&lt;/p&gt;
&lt;p&gt;We can do the same for terms related to coastal risks :&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;words_coastal &amp;lt;- c(&amp;quot;coastal risk&amp;quot;,
                   &amp;quot;coastal flood&amp;quot;,
                   &amp;quot;storm surge&amp;quot;)


res_coast &amp;lt;- lapply(words_coastal, function(x){
  gtrends(x,
          geo = &amp;quot;&amp;quot;,
          time = &amp;quot;all&amp;quot;)})


interest_coast &amp;lt;- do.call(&amp;quot;rbind&amp;quot;, lapply(res_coast, function(x){x$interest_over_time}))

interest_coast %&amp;gt;% 
  mutate(hits = as.numeric(ifelse(hits == &amp;quot;&amp;lt;1&amp;quot;, 0, hits))) %&amp;gt;% 
  ggplot(aes(x = date, y = hits)) + 
  geom_line() + 
  facet_grid(~ keyword) +
  theme_bw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://aureliencallens.github.io/post/2021-03-01-coastal-risks-google-trends.en_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Contrary to the interest for the statistical terms, the interest in coastal risk topics is more punctual. One of my hypothesis is that the interest in these topic increases after a large storm event has occurred in the world. We will investigate on this hypothesis at the end of the post.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;mapping-the-interest-of-storm-surge-and-data-science-in-the-world&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Mapping the interest of “storm surge” and “data science” in the world&lt;/h2&gt;
&lt;p&gt;In addition to analyze the trend over time with &lt;code&gt;gtrendsR&lt;/code&gt;, we can also visualize the interest depending on the countries.&lt;/p&gt;
&lt;p&gt;Let’s start with “storm surge”:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;res_world &amp;lt;- gtrends(&amp;quot;Storm surge&amp;quot;,
          geo = &amp;quot;&amp;quot;,
          time = &amp;quot;all&amp;quot;)


Int_country &amp;lt;- as_tibble(res_world$interest_by_country)

Int_country &amp;lt;- Int_country %&amp;gt;% 
  dplyr::rename(region = location)

WolrdMap = ggplot2::map_data(map = &amp;quot;world&amp;quot;)


Int_Merged &amp;lt;- Int_country %&amp;gt;% 
  dplyr::full_join(x = ., 
                   y = WolrdMap , 
                   by = &amp;quot;region&amp;quot;) %&amp;gt;% 
  mutate(hits = as.numeric(hits))


Int_Merged %&amp;gt;% 
  ggplot(aes(x = long, y = lat)) +
  geom_polygon(aes(group = group, 
                   fill = hits), 
               colour = &amp;quot;grey40&amp;quot;,
               size = 0.2) +
  scale_fill_gradientn(colors = RColorBrewer::brewer.pal(7, &amp;quot;OrRd&amp;quot;),
                       na.value = &amp;quot;white&amp;quot;) +
  coord_cartesian(ylim = c(-55, 85)) + 
  theme(legend.position=&amp;quot;bottom&amp;quot;) +
  theme_bw() + 
  labs(x = &amp;quot;&amp;quot;, y = &amp;quot;&amp;quot;) + 
  theme(panel.grid.major = element_line(size = 0.5, linetype = 2),
        panel.grid.minor = element_blank()) +
  labs(x = &amp;quot;&amp;quot;, y = &amp;quot;&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://aureliencallens.github.io/post/2021-03-01-coastal-risks-google-trends.en_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We see from this map that the number of Google search for this term is quite low for many countries in comparison with other terms (white color means not enough search comparing to the total number of search). In general the interest is higher in countries that are more likely to be impacted by marine storms or hurricanes. The Republic of Philippines seems the most interested country in storm surge.&lt;/p&gt;
&lt;p&gt;We can then continue with the term “data science”:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;res_world &amp;lt;- gtrends(&amp;quot;Data Science&amp;quot;,
          geo = &amp;quot;&amp;quot;,
          time = &amp;quot;all&amp;quot;)


Int_country &amp;lt;- as_tibble(res_world$interest_by_country)

Int_country &amp;lt;- Int_country %&amp;gt;% 
  dplyr::rename(region = location)

WolrdMap = ggplot2::map_data(map = &amp;quot;world&amp;quot;)


Int_Merged &amp;lt;- Int_country %&amp;gt;% 
  dplyr::full_join(x = ., 
                   y = WolrdMap , 
                   by = &amp;quot;region&amp;quot;) %&amp;gt;% 
  mutate(hits = as.numeric(hits))


Int_Merged %&amp;gt;% 
  ggplot(aes(x = long, y = lat)) +
  geom_polygon(aes(group = group, 
                   fill = hits), 
               colour = &amp;quot;grey40&amp;quot;,
               size = 0.2) +
  scale_fill_gradientn(colors = RColorBrewer::brewer.pal(7, &amp;quot;OrRd&amp;quot;),
                       na.value = &amp;quot;white&amp;quot;) +
  coord_cartesian(ylim = c(-55, 85)) + 
  theme(legend.position=&amp;quot;bottom&amp;quot;) +
  theme_bw() + 
  labs(x = &amp;quot;&amp;quot;, y = &amp;quot;&amp;quot;) + 
  theme(panel.grid.major = element_line(size = 0.5, linetype = 2),
        panel.grid.minor = element_blank()) +
  labs(x = &amp;quot;&amp;quot;, y = &amp;quot;&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://aureliencallens.github.io/post/2021-03-01-coastal-risks-google-trends.en_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Much more countries are interested by this topic with India being the country with the highest number of Google searchs about data science.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;focusing-on-the-trend-of-storm-surge-in-france&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Focusing on the trend of “storm surge” in France&lt;/h2&gt;
&lt;p&gt;Earlier in this post, I made the hypothesis that the number of Google search for terms like “storm surge” was related to the recent occurrence of a storm event. Let’s investigate this hypothesis for the term “Submersion marine” (marine submersion/ flood in English) in France.&lt;/p&gt;
&lt;p&gt;First, we extract the number of hits on this term for France by indicating &lt;code&gt;geo = &#34;FR&#34;&lt;/code&gt; in the &lt;code&gt;gtrends&lt;/code&gt; function. Then we create a data frame where we gather some severe storms that impacted France (&lt;a href=&#34;http://tempetes.meteo.fr/&#34; target=&#34;_blank&#34;&gt;Website listing the severe storms in France&lt;/a&gt;). Finally, we join all the information on the same graph (red dashed lines represent storm events):&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;res_fr &amp;lt;- gtrends(&amp;quot;submersion marine&amp;quot;,
          geo = &amp;quot;FR&amp;quot;,
          time = &amp;quot;all&amp;quot;)

df_storm &amp;lt;- as.data.frame(matrix(c(
  &amp;quot;2009-01-24 GMT&amp;quot;, &amp;quot;Klaus&amp;quot;,
  &amp;quot;2010-02-27 GMT&amp;quot;, &amp;quot;Xynthia&amp;quot;,
  &amp;quot;2011-12-16 GMT&amp;quot;, &amp;quot;Joachim&amp;quot;,
  &amp;quot;2014-02-14 GMT&amp;quot;, &amp;quot;Ulla&amp;quot;,
  &amp;quot;2014-11-04 GMT&amp;quot;, &amp;quot;Qendresa&amp;quot;,
  &amp;quot;2016-02-10 GMT&amp;quot;, &amp;quot;Unknown&amp;quot;,
  &amp;quot;2017-03-06 GMT&amp;quot;, &amp;quot;Zeus&amp;quot;,
  &amp;quot;2018-01-03 GMT&amp;quot;, &amp;quot;Eleanor&amp;quot;,
  &amp;quot;2019-12-13 GMT&amp;quot;, &amp;quot;Unknown&amp;quot;
  ), ncol = 2, byrow = T), stringsAsFactors = F)


names(df_storm) &amp;lt;- c(&amp;quot;date&amp;quot;, &amp;quot;Name of storm&amp;quot;)
df_storm$date &amp;lt;- as.POSIXct(df_storm$date, tz = &amp;quot;GMT&amp;quot;)


res_fr$interest_over_time %&amp;gt;% 
  mutate(hits = as.numeric(ifelse(hits == &amp;quot;&amp;lt;1&amp;quot;, 0, hits))) %&amp;gt;% 
  filter(date &amp;gt; as.POSIXct(&amp;quot;2006-01-24 GMT&amp;quot;, tz = &amp;quot;GMT&amp;quot;)) %&amp;gt;% 
  ggplot(aes(x = date, y = hits)) + 
  geom_line() +
  geom_vline(xintercept = df_storm$date, col = &amp;quot;red&amp;quot;, lty = 2, alpha = 0.5, lwd = 1) + 
  #geom_vline(xintercept = as.POSIXct(&amp;quot;2011-07-11 GMT&amp;quot;, tz = &amp;quot;GMT&amp;quot;), col = &amp;quot;blue&amp;quot;, lty = 2, alpha = 0.5) + 
  facet_grid(~ keyword) +
  theme_bw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://aureliencallens.github.io/post/2021-03-01-coastal-risks-google-trends.en_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;From this figure, we can see that after a storm event there is often a surge in interest in the term “marine submersion” in France. This confirms my hypothesis !&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusion&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This analysis was really interesting for me as it confirmed what I knew with numbers and graphs. Without a doubt, this analysis will be a great asset for my introduction, especially in the part where I will discuss about the growing interest in data science. I hope this post gave you the envy to reproduce this analysis for the terms of your choice !&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Can R and Shiny make me a better fisherman? Part 2</title>
      <link>https://aureliencallens.github.io/2020/09/25/r-shiny-fishing-part2/</link>
      <pubDate>Fri, 25 Sep 2020 00:00:00 +0000</pubDate>
      <author>aurelien.callens@gmail.com (Aurelien Callens)</author>
      <guid>https://aureliencallens.github.io/2020/09/25/r-shiny-fishing-part2/</guid>
      <description>
&lt;script src=&#34;https://aureliencallens.github.io/rmarkdown-libs/kePrint/kePrint.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://aureliencallens.github.io/rmarkdown-libs/lightable/lightable.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://aureliencallens.github.io/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://aureliencallens.github.io/rmarkdown-libs/jquery/jquery.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://aureliencallens.github.io/rmarkdown-libs/leaflet/leaflet.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://aureliencallens.github.io/rmarkdown-libs/leaflet/leaflet.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://aureliencallens.github.io/rmarkdown-libs/leafletfix/leafletfix.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://aureliencallens.github.io/rmarkdown-libs/proj4/proj4.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://aureliencallens.github.io/rmarkdown-libs/Proj4Leaflet/proj4leaflet.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://aureliencallens.github.io/rmarkdown-libs/rstudio_leaflet/rstudio_leaflet.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://aureliencallens.github.io/rmarkdown-libs/leaflet-binding/leaflet.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;In the previous blog article, I described in details how I built a shiny application that stores data about my fishing sessions. In this post, I will explore the data I have collected during the last year.&lt;/p&gt;
&lt;p&gt;To sum up, my application store the data in two csv files. The first one contains variables related to the fishing conditions at the beginning and at the end of the session such as :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Time&lt;/li&gt;
&lt;li&gt;Longitude and Latitude&lt;/li&gt;
&lt;li&gt;Meteorological conditions (9 in total : Air temperature, Atm. pressure, Wind speed and direction …)&lt;/li&gt;
&lt;li&gt;Tide conditions (Current water level, Tide status and Time since the tide peak)&lt;/li&gt;
&lt;li&gt;Specific comments&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The second one contains information about my catches :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Time when caught&lt;/li&gt;
&lt;li&gt;Time since the beginning of the session&lt;/li&gt;
&lt;li&gt;Species&lt;/li&gt;
&lt;li&gt;Length of the fish&lt;/li&gt;
&lt;li&gt;Fishing lure used&lt;/li&gt;
&lt;li&gt;Color of the fishing lure&lt;/li&gt;
&lt;li&gt;Length of the lure&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;importing-and-cleaning-my-fishing-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Importing and cleaning my fishing data&lt;/h2&gt;
&lt;p&gt;The first step of this analysis is to import both csv files.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Summary table of the first file:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(summarytools)
library(kableExtra)

# Change character variables to factor
session_data %&amp;lt;&amp;gt;% 
mutate_at(vars(Weather, Tide_status), as.factor)

# Make summary table 
session_data %&amp;gt;% 
  select(-c(Status, Comments)) %&amp;gt;% 
dfSummary(., plain.ascii = FALSE, style = &amp;quot;multiline&amp;quot;, 
          graph.magnif = 0.75, valid.col = FALSE) %&amp;gt;% 
  select(-c(text.graph, Missing)) %&amp;gt;% 
  knitr::kable(format = &amp;quot;html&amp;quot;, escape = F) %&amp;gt;%
  scroll_box(width = &amp;quot;100%&amp;quot;, height = &amp;quot;500px&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;div style=&#34;border: 1px solid #ddd; padding: 0px; overflow-y: scroll; height:500px; overflow-x: scroll; width:100%; &#34;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:right;position: sticky; top:0; background-color: #FFFFFF;&#34;&gt;
No
&lt;/th&gt;
&lt;th style=&#34;text-align:left;position: sticky; top:0; background-color: #FFFFFF;&#34;&gt;
Variable
&lt;/th&gt;
&lt;th style=&#34;text-align:left;position: sticky; top:0; background-color: #FFFFFF;&#34;&gt;
Stats / Values
&lt;/th&gt;
&lt;th style=&#34;text-align:left;position: sticky; top:0; background-color: #FFFFFF;&#34;&gt;
Freqs (% of Valid)
&lt;/th&gt;
&lt;th style=&#34;text-align:left;position: sticky; top:0; background-color: #FFFFFF;&#34;&gt;
Graph
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Session&lt;br /&gt;
[numeric]
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Mean (sd) : 19.5 (11)&lt;br /&gt;
min &amp;lt; med &amp;lt; max:&lt;br /&gt;
1 &amp;lt; 19.5 &amp;lt; 38&lt;br /&gt;
IQR (CV) : 19 (0.6)
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
38 distinct values
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;img style=&#34;border:none;background-color:transparent;padding:0;max-width:max-content;&#34; src=&#34;data:image/png;base64,%20iVBORw0KGgoAAAANSUhEUgAAAHQAAABUCAQAAAD5P9uaAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAAAmJLR0QA/4ePzL8AAAAHdElNRQfmBAwWATJ6+PREAAAAx0lEQVR42u3cwQmEMBBA0WRJdVawW6FWYHt6nT0MiArin/9uEgx+iacE+9Zq+Dz9AIYaes6IF/MrP9hvz0biwPgfmpJb1htH7pyrtfXg6yizdA2lMZTGUBpDaQylMZTGUBpDaQylMZTGUBpDaQylKRM6rk/xtCXdA/yF7TRA6LF9tjJL11AaQ2kMpTGUxlAaQ2kMpTGUxlAaQ2kMpTGUxlAaQ2kMpTGUxlAaQ2kMpTGUxlCaHk8MvvMXIrl46LHD2lJllq6hNDtoUxGs2NNpeAAAACV0RVh0ZGF0ZTpjcmVhdGUAMjAyMi0wNC0xMlQyMjowMTo1MCswMjowMEe7kIcAAAAldEVYdGRhdGU6bW9kaWZ5ADIwMjItMDQtMTJUMjI6MDE6NTArMDI6MDA25ig7AAAAAElFTkSuQmCC&#34;&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Time&lt;br /&gt;
[POSIXct, POSIXt]
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
min : 2019-04-09 19:23:09&lt;br /&gt;
med : 2019-06-21 08:13:07&lt;br /&gt;
max : 2020-09-13 22:12:40&lt;br /&gt;
range : 1y 5m 4d 2H 49M 31S
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
76 distinct values
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;img style=&#34;border:none;background-color:transparent;padding:0;max-width:max-content;&#34; src=&#34;data:image/png;base64,%20iVBORw0KGgoAAAANSUhEUgAAAHQAAABUCAQAAAD5P9uaAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAAAmJLR0QA/4ePzL8AAAAHdElNRQfmBAwWATJ6+PREAAABB0lEQVR42u2bUQ6CMBAFreF0nkBPKCfwevpbpQRsmrDMzvxB+Ogkbzdts5T3JQfXoxegqKJ9TPVDq17nlSK+l6OXvk29xGn781vj3etoh79JE11FaShKQ1EaitJQlIaiNBSloSgNRWkoSkNRGorSUJSGojQUpaEoDUVpKEojjeiO8ZtY9M49nU60d+4pTXQVpdFdo62mEHkQslt02RJiD0Kmia6iNBSloSiNNKKhTy/zwP/JQouO3H+lia6iNL5qdGTxR+OnGZ3t8LWfNNFVlEbwDcN+Wo30Ud1hYUS32mia6CpKY2iNRr7UHioaeV+VJrqK0ih1/3jCjmn1zqjA3FZJE11FaXwAiI0bDp6R7IsAAAAldEVYdGRhdGU6Y3JlYXRlADIwMjItMDQtMTJUMjI6MDE6NTArMDI6MDBHu5CHAAAAJXRFWHRkYXRlOm1vZGlmeQAyMDIyLTA0LTEyVDIyOjAxOjUwKzAyOjAwNuYoOwAAAABJRU5ErkJggg==&#34;&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Long&lt;br /&gt;
[numeric]
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Mean (sd) : -1.5 (0)&lt;br /&gt;
min &amp;lt; med &amp;lt; max:&lt;br /&gt;
-1.5 &amp;lt; -1.5 &amp;lt; -1.5&lt;br /&gt;
IQR (CV) : 0 (0)
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
69 distinct values
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;img style=&#34;border:none;background-color:transparent;padding:0;max-width:max-content;&#34; src=&#34;data:image/png;base64,%20iVBORw0KGgoAAAANSUhEUgAAAHQAAABUCAQAAAD5P9uaAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAAAmJLR0QA/4ePzL8AAAAHdElNRQfmBAwWATJ6+PREAAABA0lEQVR42u3cQQ6CMBQAUWs4HSfQE8oJvJ5ui0AwyP/gdGaHC+oLpRoClNelja5HfwGhQrfV1Rux5+sws/tbiRyx3nm3eS8b6j+2n4ljNzN1hdISSksoLaG0hNISSksoLaG0hNISSksorWagqRewp+VdvT8Y2k8+ibp638zUFUpLKC2htITSEkpLKC2htITSEkpLKC2htITSEkpLKC2htITSEkqrGejBN2t80z53rvwBdJ/nTkfQ/Gd28/o4okc+sxubi9FvDenvsZgb8V6ddmGLUd7Nb0sjjsc74aobMxtOCI1ZEFehlJ+cVWj+uRZTqQ/YA/bOn3rVLTDbYs38YRBK6w1cEB4ObwvYYwAAACV0RVh0ZGF0ZTpjcmVhdGUAMjAyMi0wNC0xMlQyMjowMTo1MCswMjowMEe7kIcAAAAldEVYdGRhdGU6bW9kaWZ5ADIwMjItMDQtMTJUMjI6MDE6NTArMDI6MDA25ig7AAAAAElFTkSuQmCC&#34;&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Lat&lt;br /&gt;
[numeric]
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Mean (sd) : 43.5 (0)&lt;br /&gt;
min &amp;lt; med &amp;lt; max:&lt;br /&gt;
43.5 &amp;lt; 43.5 &amp;lt; 43.5&lt;br /&gt;
IQR (CV) : 0 (0)
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
70 distinct values
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;img style=&#34;border:none;background-color:transparent;padding:0;max-width:max-content;&#34; src=&#34;data:image/png;base64,%20iVBORw0KGgoAAAANSUhEUgAAAHQAAABUCAQAAAD5P9uaAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAAAmJLR0QA/4ePzL8AAAAHdElNRQfmBAwWATJ6+PREAAAA00lEQVR42u3bQQqDMBBA0aZ4Ok+gJ7Qn6PXsdlzIqJTG/vl/JwbxQQy4mLY+avTs/QJChV5riBf3+V5fB15latmKuGDIFvdqTO6/Tz6vzNYVSksoLaG0hNISSksoLaG0hNISSksoLaG0hNISSksoLaG0hNISSksoLaG0hNISSksoLaG0hNISSksoLaG0hNIqA73tyFZePr82h+G0P4aem14rs3WF0hJKq8upe2SwGQH9/mBzXpmtK5SWUFqbU7fHsf+rWrQtMGj8TWsw225lvlGhtD4BqxEAhUjPPAAAACV0RVh0ZGF0ZTpjcmVhdGUAMjAyMi0wNC0xMlQyMjowMTo1MCswMjowMEe7kIcAAAAldEVYdGRhdGU6bW9kaWZ5ADIwMjItMDQtMTJUMjI6MDE6NTArMDI6MDA25ig7AAAAAElFTkSuQmCC&#34;&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Air_temp&lt;br /&gt;
[numeric]
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Mean (sd) : 19.1 (4.7)&lt;br /&gt;
min &amp;lt; med &amp;lt; max:&lt;br /&gt;
10.6 &amp;lt; 18.3 &amp;lt; 30.7&lt;br /&gt;
IQR (CV) : 6.4 (0.2)
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
73 distinct values
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;img style=&#34;border:none;background-color:transparent;padding:0;max-width:max-content;&#34; src=&#34;data:image/png;base64,%20iVBORw0KGgoAAAANSUhEUgAAAHQAAABUCAQAAAD5P9uaAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAAAmJLR0QA/4ePzL8AAAAHdElNRQfmBAwWATJ6+PREAAABJ0lEQVR42u2bYQ6CMAxGmeF0nEBPKCfwevp3uqmjGZR9fe8fBAgvaZuug/ScYnDxfgFEEbUx5wfWfF0rN16Tt9o05a8wm5/yxvJx/PB2LAgTuoiqgagaiKoRRtTQMKxNDdTZuiVTZ9TSBy3FGd9uKUzoIqoGomogqgaiaiCqBqJqIKoGomogqgaiaiCqRqcdbxv1Ufg+Y25X0SPH3GFCF1E1/uRo285ZK32f1lW0b7nw/BopTOgiqgaiaiCqBqJqIKoGomo4j1JqlIu5HlOkE4rus5gLE7qIqnHCHC1pKU+1edQtu2oI0bby9PuqMKGLqBpD5GjJ9lH4oKLbx+phQhdRNd5y1HO361DREf6+txImdBFVI+X15y5WjPJlWhJz+0qY0EVUjRcKXyYHmYFvUQAAACV0RVh0ZGF0ZTpjcmVhdGUAMjAyMi0wNC0xMlQyMjowMTo1MCswMjowMEe7kIcAAAAldEVYdGRhdGU6bW9kaWZ5ADIwMjItMDQtMTJUMjI6MDE6NTArMDI6MDA25ig7AAAAAElFTkSuQmCC&#34;&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Weather&lt;br /&gt;
[factor]
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
1. Clear&lt;br /&gt;
2. Drizzle&lt;br /&gt;
3. Humid&lt;br /&gt;
4. Humid and Mostly Cloudy&lt;br /&gt;
5. Humid and Partly Cloudy&lt;br /&gt;
6. Mostly Cloudy&lt;br /&gt;
7. Overcast&lt;br /&gt;
8. Partly Cloudy&lt;br /&gt;
9. Possible Light Rain&lt;br /&gt;
10. Windy and Mostly Cloudy
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
\25 (32.9%)&lt;br /&gt;
 1 ( 1.3%)&lt;br /&gt;
 1 ( 1.3%)&lt;br /&gt;
 2 ( 2.6%)&lt;br /&gt;
 1 ( 1.3%)&lt;br /&gt;
\18 (23.7%)&lt;br /&gt;
 8 (10.5%)&lt;br /&gt;
\17 (22.4%)&lt;br /&gt;
 2 ( 2.6%)&lt;br /&gt;
 1 ( 1.3%)
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;img style=&#34;border:none;background-color:transparent;padding:0;max-width:max-content;&#34; src=&#34;data:image/png;base64,%20iVBORw0KGgoAAAANSUhEUgAAADEAAAC3CAQAAAARfH5SAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAAAmJLR0QA/4ePzL8AAAAHdElNRQfmBAwWATJ6+PREAAAA/0lEQVR42u3cwQ2DMAyF4bjqdEzQTlgmYD04IQVUiJvECL3+78aFT8hRjFGEzSk6j3BBhHjmF59uhXnbAZHS0AWYNlcatYCAgFAldtvgVHeX01i+f/drstlefnktxnkMeFvQWFEQEBAQf07Q9WqIC54CAgICAiIgGl1vMxSvPe9lNbc6yu4phk4fIE+IiEBAQEDcmeALpzPMehAQEBAChGBLisnXWe+3lCbD5qMm5XcWjVpAQECoEgxizjhbUssHSVdLaquQxqKFgICAqA5dz5nmQazcDxsHMU/tNBYtBAQERHXoes5w1AQCAgJCgKDrOcNREwgICAgBwvhxym2IBWG8OB3nstqxAAAAJXRFWHRkYXRlOmNyZWF0ZQAyMDIyLTA0LTEyVDIyOjAxOjUwKzAyOjAwR7uQhwAAACV0RVh0ZGF0ZTptb2RpZnkAMjAyMi0wNC0xMlQyMjowMTo1MCswMjowMDbmKDsAAAAASUVORK5CYII=&#34;&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Atm_pres&lt;br /&gt;
[numeric]
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Mean (sd) : 1017.7 (6.2)&lt;br /&gt;
min &amp;lt; med &amp;lt; max:&lt;br /&gt;
996.8 &amp;lt; 1017.3 &amp;lt; 1028.6&lt;br /&gt;
IQR (CV) : 7.2 (0)
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
70 distinct values
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;img style=&#34;border:none;background-color:transparent;padding:0;max-width:max-content;&#34; src=&#34;data:image/png;base64,%20iVBORw0KGgoAAAANSUhEUgAAAHQAAABUCAQAAAD5P9uaAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAAAmJLR0QA/4ePzL8AAAAHdElNRQfmBAwWATJ6+PREAAAA9klEQVR42u3cQQ7CIBQAUTE9nSfQE+oJvJ5ucVEISAqdP7MzxtaXfJLWEtPnEqPr7C8gVGhfW/5iznp9VU57T71Hzj+49R5kZLfCe+9B5wgzukJpCaUllJZQWkJpCaUllJZQWkJpCaUllJZQWkJpCaUllJZQWkJpCaUVBnrI9pvaTiIM9JidROXCjK5QWkJpCaW1xH7d3moXIo9sZ/KpoS0XImFGNwz0BKM75pbgBND9ddhyOxBmdIXSEkpLKC2htITSEkpLKK0w0J8b7/4/CljhwWAD9J/He/MfDJYLM7phoClfXM/lV1pb+S/1CWbbLczoCqX1BaYUF629GKdEAAAAJXRFWHRkYXRlOmNyZWF0ZQAyMDIyLTA0LTEyVDIyOjAxOjUwKzAyOjAwR7uQhwAAACV0RVh0ZGF0ZTptb2RpZnkAMjAyMi0wNC0xMlQyMjowMTo1MCswMjowMDbmKDsAAAAASUVORK5CYII=&#34;&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Wind_str&lt;br /&gt;
[numeric]
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Mean (sd) : 10.4 (6.2)&lt;br /&gt;
min &amp;lt; med &amp;lt; max:&lt;br /&gt;
3.1 &amp;lt; 8.8 &amp;lt; 45.9&lt;br /&gt;
IQR (CV) : 5.7 (0.6)
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
73 distinct values
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;img style=&#34;border:none;background-color:transparent;padding:0;max-width:max-content;&#34; src=&#34;data:image/png;base64,%20iVBORw0KGgoAAAANSUhEUgAAAHQAAABUCAQAAAD5P9uaAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAAAmJLR0QA/4ePzL8AAAAHdElNRQfmBAwWATJ6+PREAAAA/UlEQVR42u3bXRLBMBRAYTFdnRWwQl2B7fEa3E6o/sS557wxHvKRptVMy/2Qo+PeAxAqdF5D/SI6XseJg/hc9h56u3qIQ/vjp+C9296Gr0szdYXSEkpLKC2htITSEkpLKC2htITSEkpLKC2htITSEkpLKK000A82guOinfCed8FnQ9/3wfveBU8zdYXSEkpLKC2htITSEkpLKC2htITSEkpLKK2n+7oj+BnLlxvY/3Zbejb0t3replgU2vN8SLMYCaUllFYa6KKnl6j4amv7s+vq0F4ehU8zddNAV5+62xSvBJdqJYBA29fZpf4qrrD/o/UvWmC2ydIsRkJpPQAcNhhjjiifFAAAACV0RVh0ZGF0ZTpjcmVhdGUAMjAyMi0wNC0xMlQyMjowMTo1MCswMjowMEe7kIcAAAAldEVYdGRhdGU6bW9kaWZ5ADIwMjItMDQtMTJUMjI6MDE6NTArMDI6MDA25ig7AAAAAElFTkSuQmCC&#34;&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Wind_dir&lt;br /&gt;
[numeric]
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Mean (sd) : 204.2 (107.2)&lt;br /&gt;
min &amp;lt; med &amp;lt; max:&lt;br /&gt;
6 &amp;lt; 233.5 &amp;lt; 358&lt;br /&gt;
IQR (CV) : 200.8 (0.5)
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
65 distinct values
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;img style=&#34;border:none;background-color:transparent;padding:0;max-width:max-content;&#34; src=&#34;data:image/png;base64,%20iVBORw0KGgoAAAANSUhEUgAAAHQAAABUCAQAAAD5P9uaAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAAAmJLR0QA/4ePzL8AAAAHdElNRQfmBAwWATJ6+PREAAABAUlEQVR42u2bUQrCMBAFjfR0nkBPaE/g9fQ3CCuhWreZnflrQ2kGXiC8pu15qsE5ewKKKrqNpb847npdP0zt2qKRfmA5TcIluP8YfL5MdBWloSgNRWkoSkNRGorSUJSGojRSGoa4GIlrkSlFo2JktBbZQpnoKkpDURqK0lCUhqI0FKWhKA1FaQw2DNtOhRyJ4Srl21Mh2dSM7pp+omq/GbxFNzug+72/THQVpaEoDUVpKEqjjOgPPgTn75D/JBrvT7N3zj1loqsoDUVpKEpDURqK0lCUhqI0yohO89d+TNxw3LpP1ADRsR6jTHTLiLY+4Pcp+rxx+jXaYG4hZaKrKI0Xi14bsbsk3owAAAAldEVYdGRhdGU6Y3JlYXRlADIwMjItMDQtMTJUMjI6MDE6NTArMDI6MDBHu5CHAAAAJXRFWHRkYXRlOm1vZGlmeQAyMDIyLTA0LTEyVDIyOjAxOjUwKzAyOjAwNuYoOwAAAABJRU5ErkJggg==&#34;&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Cloud_cover&lt;br /&gt;
[numeric]
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Mean (sd) : 0.4 (0.3)&lt;br /&gt;
min &amp;lt; med &amp;lt; max:&lt;br /&gt;
0 &amp;lt; 0.4 &amp;lt; 1&lt;br /&gt;
IQR (CV) : 0.7 (0.8)
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
43 distinct values
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;img style=&#34;border:none;background-color:transparent;padding:0;max-width:max-content;&#34; src=&#34;data:image/png;base64,%20iVBORw0KGgoAAAANSUhEUgAAAHQAAABUCAQAAAD5P9uaAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAAAmJLR0QA/4ePzL8AAAAHdElNRQfmBAwWATJ6+PREAAABAUlEQVR42u2bXQ7CIBAGxfR0PYGesD2B19NXjNUaoCKzM2/9oWGSb7OkgXQ/xeDcewKKKlrGlF8smwV7Sb0nWUo+8en50fzy8q33bBsRJrqK0lCUhqI0FKWhKA1FaShKQ1EaitJQlIaiNBSloSgNRWkoSkNRGorSUJSGojQUpaEojan+E59Yq7ZR1o3+qWjtNsp2mzDDRDeMaMPorlXnEI4Yfc2quWmN9qzHvdFhohtG9Ivotuxmfy06b9wb70iB0T2SHo2oi2hdMZSNDhNdRWkoSiOMaHF7qeuFA4mOdtI0THQVpaEoDUVpKEoj5Su5ZbBl3R75n/oEc3tLmOgqSuMBOxEh/7VPo8kAAAAldEVYdGRhdGU6Y3JlYXRlADIwMjItMDQtMTJUMjI6MDE6NTArMDI6MDBHu5CHAAAAJXRFWHRkYXRlOm1vZGlmeQAyMDIyLTA0LTEyVDIyOjAxOjUwKzAyOjAwNuYoOwAAAABJRU5ErkJggg==&#34;&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Preci_prob&lt;br /&gt;
[numeric]
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Mean (sd) : 0 (0.1)&lt;br /&gt;
min &amp;lt; med &amp;lt; max:&lt;br /&gt;
0 &amp;lt; 0 &amp;lt; 0.5&lt;br /&gt;
IQR (CV) : 0 (2.2)
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
17 distinct values
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;img style=&#34;border:none;background-color:transparent;padding:0;max-width:max-content;&#34; src=&#34;data:image/png;base64,%20iVBORw0KGgoAAAANSUhEUgAAAHQAAABUCAQAAAD5P9uaAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAAAmJLR0QA/4ePzL8AAAAHdElNRQfmBAwWATJ6+PREAAAA3UlEQVR42u3cQQrCMBQAUSM5XU+gJ6wn6PV0G/EXQyrEzp/ZWVPIgzR0k5bnJUfX2RMQKnSs2v5Ywwf2VmZPcrR24vX9r+Vj8DZ7tj8qzdIVSksoLaG0hNISSksoLaG0hNISSksoLaG0hNISSksoLaG0hNISSksoLaG0hNISSksoLaG0hNISSksoLaG0hNISSksorTTQ+n3IA3GqtAO6BNfOd6o0zdIVSisNtGMziov24n/eiYehZzvfn2bppoEOL92++t+qjr1/xXffm7tLO2KFffNnF0ouzTMqlNYLgyQUslOrargAAAAldEVYdGRhdGU6Y3JlYXRlADIwMjItMDQtMTJUMjI6MDE6NTArMDI6MDBHu5CHAAAAJXRFWHRkYXRlOm1vZGlmeQAyMDIyLTA0LTEyVDIyOjAxOjUwKzAyOjAwNuYoOwAAAABJRU5ErkJggg==&#34;&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
12
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Preci_int&lt;br /&gt;
[numeric]
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Mean (sd) : 0 (0.1)&lt;br /&gt;
min &amp;lt; med &amp;lt; max:&lt;br /&gt;
0 &amp;lt; 0 &amp;lt; 0.7&lt;br /&gt;
IQR (CV) : 0 (2.7)
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
29 distinct values
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;img style=&#34;border:none;background-color:transparent;padding:0;max-width:max-content;&#34; src=&#34;data:image/png;base64,%20iVBORw0KGgoAAAANSUhEUgAAAHQAAABUCAQAAAD5P9uaAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAAAmJLR0QA/4ePzL8AAAAHdElNRQfmBAwWATJ6+PREAAAAxUlEQVR42u3cQQ5AMBQAUZWezgk4ISdwPba1oCmhMZ23E5V0Gix/2Lo29LU3YKih98T0Ys58sGOovd0y6Xbj8dZw8dhae9+PNPPqGkpjKI2hNIbSGEpjKI2hNIbSGEpjKI2hNIbSGEpjKI2hNIbSGEpjKI2hNIbSGEpjKI2hNIbSGEpjKI2hNIbSGEpjKI2hNIbSGEpjKI2hNLFk8fLSBJkvBlkUhZ6Po1gzoyreGWSRO/gpOcCQrs2NEPmb01CyZn5GhtLs40EPrJ6Djx8AAAAldEVYdGRhdGU6Y3JlYXRlADIwMjItMDQtMTJUMjI6MDE6NTArMDI6MDBHu5CHAAAAJXRFWHRkYXRlOm1vZGlmeQAyMDIyLTA0LTEyVDIyOjAxOjUwKzAyOjAwNuYoOwAAAABJRU5ErkJggg==&#34;&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
13
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Moon&lt;br /&gt;
[numeric]
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Mean (sd) : 0.6 (0.3)&lt;br /&gt;
min &amp;lt; med &amp;lt; max:&lt;br /&gt;
0 &amp;lt; 0.6 &amp;lt; 1&lt;br /&gt;
IQR (CV) : 0.5 (0.5)
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
32 distinct values
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;img style=&#34;border:none;background-color:transparent;padding:0;max-width:max-content;&#34; src=&#34;data:image/png;base64,%20iVBORw0KGgoAAAANSUhEUgAAAHQAAABUCAQAAAD5P9uaAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAAAmJLR0QA/4ePzL8AAAAHdElNRQfmBAwWATJ6+PREAAABEklEQVR42u2b2w2DMAwAScV0naCdsEzQ9drfIKDhkfI43/0RKZJPMpHtQPo0MbgdHYCiiq6jzR+u8L52E0E+0nAtX2qby3EfWXsXd4VJXUVpKEpDURqK0lCUhqI0FKWhKI0wosVRypIZzZGMxfnMYpwxM1o3o9mbYZT9GMOkrqI0FKWhKA1FaShKQ1EaB9x4dwu+IKjXDB5ytT/e+JUarW2ESV1FaShKQ1EaYUR7BcOSmmXItt27ipbHwL8Z2/3femc+YVJXURqK0lCURhjRk/8lUa/aOrlovboqTOoqSkNRGorSUJSGojQUpbG6ezn3uLqi6FkG03MJk7qK0kj5mfK62AFTIv8dJMHcJgmTuorS+AJcnR9YpC8V/AAAACV0RVh0ZGF0ZTpjcmVhdGUAMjAyMi0wNC0xMlQyMjowMTo1MCswMjowMEe7kIcAAAAldEVYdGRhdGU6bW9kaWZ5ADIwMjItMDQtMTJUMjI6MDE6NTArMDI6MDA25ig7AAAAAElFTkSuQmCC&#34;&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
14
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Water_level&lt;br /&gt;
[numeric]
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Mean (sd) : 2.8 (1)&lt;br /&gt;
min &amp;lt; med &amp;lt; max:&lt;br /&gt;
1.1 &amp;lt; 2.8 &amp;lt; 4.3&lt;br /&gt;
IQR (CV) : 1.9 (0.4)
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
65 distinct values
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;img style=&#34;border:none;background-color:transparent;padding:0;max-width:max-content;&#34; src=&#34;data:image/png;base64,%20iVBORw0KGgoAAAANSUhEUgAAAHQAAABUCAQAAAD5P9uaAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAAAmJLR0QA/4ePzL8AAAAHdElNRQfmBAwWATJ6+PREAAAA/ElEQVR42u3aQQ6CMBBAUWo4nSfQE8oJvJ5u64KJFaTlz/87Q2J4yQChpbymHF16n4BQob811z9GvF6X8KRuJTpaH5yn4buuHnk2/Eua0RVKSygtobSE0hJKSygtobSE0hJKSygtobSE0mpYqd+yOdC/pi2JfTYH+pRmdIXSEkrr4667jLjl/Q9o9AA5wyMkKs3oCqUllJZQWkJpCaWVBnqCz1ij4vete7Vgd3Lo929bjm5rW17aj1gT3g0aD1H/F/o0o5sGOsRd94hFuSGgR1zBaUZXKC2htITSEkpLKC2htITSEkorDbTUyzUP2AdV9ZZEgdlWSzO6Qmm9AR3nGQphvDmeAAAAJXRFWHRkYXRlOmNyZWF0ZQAyMDIyLTA0LTEyVDIyOjAxOjUwKzAyOjAwR7uQhwAAACV0RVh0ZGF0ZTptb2RpZnkAMjAyMi0wNC0xMlQyMjowMTo1MCswMjowMDbmKDsAAAAASUVORK5CYII=&#34;&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
15
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Tide_status&lt;br /&gt;
[factor]
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
1. Dead&lt;br /&gt;
2. Down&lt;br /&gt;
3. Up
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
\11 (14.5%)&lt;br /&gt;
\28 (36.8%)&lt;br /&gt;
\37 (48.7%)
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;img style=&#34;border:none;background-color:transparent;padding:0;max-width:max-content;&#34; src=&#34;data:image/png;base64,%20iVBORw0KGgoAAAANSUhEUgAAAEMAAAA7CAQAAACKsv9UAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAAAmJLR0QA/4ePzL8AAAAHdElNRQfmBAwWATJ6+PREAAAAn0lEQVRYw+2WUQ5AMBAFVXo6J+CEnMD1+N2SVptYXpqZPxFM+lb2hWNQYPxbAI070V6sj4Myh/c+bV8V01tT8cHd7TREQkEDDTTQQKMDjctq81teZYLd7d8WQrvoRUIR0UhmY3NIpa6vNbWvdmpHXiQUNNBAAw00OtCgfdG+cri3rzyLScW5feVJfwaRUNBAAw000OhAQ7F9/YdIKGhYTgyGEaS0KaAfAAAAJXRFWHRkYXRlOmNyZWF0ZQAyMDIyLTA0LTEyVDIyOjAxOjUwKzAyOjAwR7uQhwAAACV0RVh0ZGF0ZTptb2RpZnkAMjAyMi0wNC0xMlQyMjowMTo1MCswMjowMDbmKDsAAAAASUVORK5CYII=&#34;&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
16
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Tide_time&lt;br /&gt;
[numeric]
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Mean (sd) : 186.8 (125.3)&lt;br /&gt;
min &amp;lt; med &amp;lt; max:&lt;br /&gt;
5 &amp;lt; 175 &amp;lt; 375&lt;br /&gt;
IQR (CV) : 255 (0.7)
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
47 distinct values
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;img style=&#34;border:none;background-color:transparent;padding:0;max-width:max-content;&#34; src=&#34;data:image/png;base64,%20iVBORw0KGgoAAAANSUhEUgAAAHQAAABUCAQAAAD5P9uaAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAAAmJLR0QA/4ePzL8AAAAHdElNRQfmBAwWATJ6+PREAAABB0lEQVR42u2cUQ6CMBAFwXA6T6AnlBN4Pf2txpJmRWlnZ/6ANOkk2/BYCvNjysHp6AkoqmiMpTzod72uG1O7zLUr5YVlGoRz5fy9cXya0lWUhqI0FKWhKI00oi8RMJYox+At636bKPslTekqSkNRGorSUJSGojQUpaEoDUVpKEpDURppRJtf7dd7vmN0fJtFR+/4pildRWkoSkNRGorS2GF35xrY/fr/2LiDaD0c9hQb05SuojQUpZFGtKuvJCJ35K1R1+Ju3ZVorGHTNiZN6aYRPah0Y6txQNHP6+qXGThN6SpKQ1EaitJQlIaiNBSlkUZ0Lh8Mb/3+QyRE2TOaYW5V0pSuojSeJ48cCsu8CVkAAAAldEVYdGRhdGU6Y3JlYXRlADIwMjItMDQtMTJUMjI6MDE6NTArMDI6MDBHu5CHAAAAJXRFWHRkYXRlOm1vZGlmeQAyMDIyLTA0LTEyVDIyOjAxOjUwKzAyOjAwNuYoOwAAAABJRU5ErkJggg==&#34;&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Summary table of the second file:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Change character variables to factor
catch_data %&amp;lt;&amp;gt;% 
mutate_at(vars(species, lure, colour, length_lure), as.factor)

# Make summary table 
catch_data %&amp;gt;% 
dfSummary(., plain.ascii = FALSE, style = &amp;quot;multiline&amp;quot;, 
          graph.magnif = 0.75, valid.col = FALSE) %&amp;gt;% 
  select(-c(text.graph, Missing)) %&amp;gt;% 
  knitr::kable(format = &amp;quot;html&amp;quot;, escape = F) %&amp;gt;%
  scroll_box(width = &amp;quot;100%&amp;quot;, height = &amp;quot;500px&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;div style=&#34;border: 1px solid #ddd; padding: 0px; overflow-y: scroll; height:500px; overflow-x: scroll; width:100%; &#34;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:right;position: sticky; top:0; background-color: #FFFFFF;&#34;&gt;
No
&lt;/th&gt;
&lt;th style=&#34;text-align:left;position: sticky; top:0; background-color: #FFFFFF;&#34;&gt;
Variable
&lt;/th&gt;
&lt;th style=&#34;text-align:left;position: sticky; top:0; background-color: #FFFFFF;&#34;&gt;
Stats / Values
&lt;/th&gt;
&lt;th style=&#34;text-align:left;position: sticky; top:0; background-color: #FFFFFF;&#34;&gt;
Freqs (% of Valid)
&lt;/th&gt;
&lt;th style=&#34;text-align:left;position: sticky; top:0; background-color: #FFFFFF;&#34;&gt;
Graph
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
n_ses&lt;br /&gt;
[numeric]
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Mean (sd) : 24.3 (13.2)&lt;br /&gt;
min &amp;lt; med &amp;lt; max:&lt;br /&gt;
1 &amp;lt; 28 &amp;lt; 37&lt;br /&gt;
IQR (CV) : 20 (0.5)
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
18 distinct values
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;img style=&#34;border:none;background-color:transparent;padding:0;max-width:max-content;&#34; src=&#34;data:image/png;base64,%20iVBORw0KGgoAAAANSUhEUgAAAHQAAABUCAQAAAD5P9uaAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAAAmJLR0QA/4ePzL8AAAAHdElNRQfmBAwWATJ6+PREAAAA8ElEQVR42u3cQQrCMBBAUSOezhPoCe0JvJ5u20JiMYYxf/7b1YX0QxrIWCyvUw7n6Bsw1NDvXNYXMz6vS+Om76USOqdr5fPn5irN0jWUxlAaQ2kMpTGUxlCazemldeS5lU9fNdLSfYLcHdOOHXki9N5ZmqVrKI2hNIbSGEpjKI2hNIbSGEpjKI2hNIbSBLx+0z+MniS0NYweN0BPs3QNpTGUxlAaQ2kMpTGUxlAaQ2kMpTGUxlCagXPdmEF1QGhtUB3zNneapWsozeFn9L+2loGhEb+A/VKapWsoTVnvMY/JN5y99V+IFFhbVZqlayjNGxHNGVPK0jg3AAAAJXRFWHRkYXRlOmNyZWF0ZQAyMDIyLTA0LTEyVDIyOjAxOjUwKzAyOjAwR7uQhwAAACV0RVh0ZGF0ZTptb2RpZnkAMjAyMi0wNC0xMlQyMjowMTo1MCswMjowMDbmKDsAAAAASUVORK5CYII=&#34;&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
time&lt;br /&gt;
[POSIXct, POSIXt]
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
min : 2019-04-09 19:23:29&lt;br /&gt;
med : 2020-05-25 21:20:55&lt;br /&gt;
max : 2020-09-04 21:33:17&lt;br /&gt;
range : 1y 4m 26d 2H 9M 48S
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
57 distinct values
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;img style=&#34;border:none;background-color:transparent;padding:0;max-width:max-content;&#34; src=&#34;data:image/png;base64,%20iVBORw0KGgoAAAANSUhEUgAAAHQAAABUCAQAAAD5P9uaAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAAAmJLR0QA/4ePzL8AAAAHdElNRQfmBAwWATJ6+PREAAAA10lEQVR42u3csQ2DMBBA0VyU6ZggmTBMwHqkNRGnWKQA//uvwwXyl0xjC8d6q+F+9gQMNfSYR/sw6vc6JxN/RRI6rmlnbNk8lVm6htIYSmMojaE0htIYSmMojaE0htIYSmMojaE0htIYSrM5TcuO357R86pr+zo2/H38NqoyS9dQGkNpDKUxlMZQGkNpDKUxlMZQGkNpDKXp+h3kKhvb8x8/5nSFTrujZ2xsH59JmaVrKI2hNIbSGEpjKI2hNIbSGEoT7e7Ee9Q7RBLtFSIBa0uVWbqG0nwAbkkSVhHqu04AAAAldEVYdGRhdGU6Y3JlYXRlADIwMjItMDQtMTJUMjI6MDE6NTArMDI6MDBHu5CHAAAAJXRFWHRkYXRlOm1vZGlmeQAyMDIyLTA0LTEyVDIyOjAxOjUwKzAyOjAwNuYoOwAAAABJRU5ErkJggg==&#34;&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
min_fishing&lt;br /&gt;
[numeric]
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Mean (sd) : 51.4 (43.4)&lt;br /&gt;
min &amp;lt; med &amp;lt; max:&lt;br /&gt;
0 &amp;lt; 44 &amp;lt; 150&lt;br /&gt;
IQR (CV) : 77 (0.8)
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
35 distinct values
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;img style=&#34;border:none;background-color:transparent;padding:0;max-width:max-content;&#34; src=&#34;data:image/png;base64,%20iVBORw0KGgoAAAANSUhEUgAAAHQAAABUCAQAAAD5P9uaAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAAAmJLR0QA/4ePzL8AAAAHdElNRQfmBAwWATJ6+PREAAABC0lEQVR42u2cUQqDMBAFm5LT9QTtCfUEXq/9TaEpxighszN/IpEMvCVLjKb3LQb30RNQVNFj5PJi+VOwzzR6qu2UU87ftx6VIdvoOXcTJrqK0lCUhqI0FKWhKA1FaShKQ1EaitJQlIaiNHL/I1pZh2yTDxAds00eJrqK0lCUhqI0FKWhKI3dvW69FZ/jvMpu0dnPq4SJrqI0FKURRvSEPaM5VtgTROdYYcNEV1EaitJQlIaiNMKIXvp+dG3+lPG6vvlS0d9d8NY84oy+OUx0FaWhKA1FaQw5UHWE3lZiGtHeViJMdMOIThPdOvXqfRXVCxDdV71hohtGNJUBX2D//ClrNMHcqoSJrqI0PsMwHWcXHY73AAAAJXRFWHRkYXRlOmNyZWF0ZQAyMDIyLTA0LTEyVDIyOjAxOjUwKzAyOjAwR7uQhwAAACV0RVh0ZGF0ZTptb2RpZnkAMjAyMi0wNC0xMlQyMjowMTo1MCswMjowMDbmKDsAAAAASUVORK5CYII=&#34;&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
species&lt;br /&gt;
[factor]
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
1. bar&lt;br /&gt;
2. bar_m
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
\52 (91.2%)&lt;br /&gt;
 5 ( 8.8%)
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;img style=&#34;border:none;background-color:transparent;padding:0;max-width:max-content;&#34; src=&#34;data:image/png;base64,%20iVBORw0KGgoAAAANSUhEUgAAAHIAAAAqCAQAAADFCcdsAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAAAmJLR0QA/4ePzL8AAAAHdElNRQfmBAwWATJ6+PREAAAAjklEQVRo3u2YQQqAMAwEE/F1vkBfqC/o9/QaRbGI0DLZueVSMjQ5bHw3PkPrBiQpyXrGWKygBV38QdJsat3bT5RTlWJcJUlBkhQkSUGSFCRJQZIULimkfHulczxGSFCctBAnE47rdvuVs9c91S+vlwHClqYYV0lSkCQFSVKQJAVJUpAkhXyXASopxlWSFA7QnAvHD/kqRgAAACV0RVh0ZGF0ZTpjcmVhdGUAMjAyMi0wNC0xMlQyMjowMTo1MCswMjowMEe7kIcAAAAldEVYdGRhdGU6bW9kaWZ5ADIwMjItMDQtMTJUMjI6MDE6NTArMDI6MDA25ig7AAAAAElFTkSuQmCC&#34;&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
length&lt;br /&gt;
[numeric]
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Mean (sd) : 29.1 (9.8)&lt;br /&gt;
min &amp;lt; med &amp;lt; max:&lt;br /&gt;
10 &amp;lt; 30 &amp;lt; 49&lt;br /&gt;
IQR (CV) : 12 (0.3)
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
22 distinct values
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;img style=&#34;border:none;background-color:transparent;padding:0;max-width:max-content;&#34; src=&#34;data:image/png;base64,%20iVBORw0KGgoAAAANSUhEUgAAAHQAAABUCAQAAAD5P9uaAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAAAmJLR0QA/4ePzL8AAAAHdElNRQfmBAwWATJ6+PREAAABFUlEQVR42u2a2w3CMBAEMUp1VAAVkgpoD/6QQRwyDo7t2Z2/RMpjpM3pfE66HzQ49n4Bi1q0jiU/qPle1y8XnVNfufzxS/VdnpyC87e+lm/IRNeiNCxKw6I0LErDojQsSsOiNCxKw6I0/jAziokHZ/uPzZqKjjQ2k4muRWlYlIZFaViURtPO6Fda7rUOJdqyaZSJrkVpyIgWFqN1+h/MiqvuSIvoGmSia1EaL9/o/CWnUHT+khMjE12L0hhsmRazdXtjGtGtZVImuhalISPaqRjt32x2Ev1cQ1s2mjLRtSiNaTqjmLiwXbLmECBa1hzKRNeiNCxKw6I0LErDojQsSkNGNOWLuStsfzRfjyaYW4hMdC1K4wF8iR25d7sLagAAACV0RVh0ZGF0ZTpjcmVhdGUAMjAyMi0wNC0xMlQyMjowMTo1MCswMjowMEe7kIcAAAAldEVYdGRhdGU6bW9kaWZ5ADIwMjItMDQtMTJUMjI6MDE6NTArMDI6MDA25ig7AAAAAElFTkSuQmCC&#34;&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
lure&lt;br /&gt;
[factor]
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
1. jerkbait&lt;br /&gt;
2. shad&lt;br /&gt;
3. slug&lt;br /&gt;
4. topwater
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
 2 ( 3.5%)&lt;br /&gt;
\38 (66.7%)&lt;br /&gt;
\16 (28.1%)&lt;br /&gt;
 1 ( 1.8%)
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;img style=&#34;border:none;background-color:transparent;padding:0;max-width:max-content;&#34; src=&#34;data:image/png;base64,%20iVBORw0KGgoAAAANSUhEUgAAAFcAAABOCAQAAAD/GEK0AAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAAAmJLR0QA/4ePzL8AAAAHdElNRQfmBAwWATJ6+PREAAAA0ElEQVRo3u3aQQrCMBSE4Rfp6XoCPaGewOvVRUFfg0poo5mBf1YVNx9hhAy1LOGU02gAXJ1M+cP1WeRzGQ17JVOm7VdzRETcRws/xqwMcOHChQsXLly4LaluZLp3sTUlbzXN3Zbvu85luEke7yUd79s1oZTtr8msDHDhwoULFy5cuC1hTXQnpmfnMhxdE79/o9FxTfyj92ZlgAsXLly4cOHCbQlrojsxPTuXYV0TSv9yqlOdrt67ia9c9cCFCxcuXLhw4e7gWq0J/XiXQT1m3Ad3ZBbKHMa9qgAAACV0RVh0ZGF0ZTpjcmVhdGUAMjAyMi0wNC0xMlQyMjowMTo1MCswMjowMEe7kIcAAAAldEVYdGRhdGU6bW9kaWZ5ADIwMjItMDQtMTJUMjI6MDE6NTArMDI6MDA25ig7AAAAAElFTkSuQmCC&#34;&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
colour&lt;br /&gt;
[factor]
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
1. clair&lt;br /&gt;
2. naturel&lt;br /&gt;
3. sombre
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
\21 (36.8%)&lt;br /&gt;
\26 (45.6%)&lt;br /&gt;
\10 (17.5%)
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;img style=&#34;border:none;background-color:transparent;padding:0;max-width:max-content;&#34; src=&#34;data:image/png;base64,%20iVBORw0KGgoAAAANSUhEUgAAAEAAAAA7CAQAAABhhURXAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAAAmJLR0QA/4ePzL8AAAAHdElNRQfmBAwWATJ6+PREAAAAnElEQVRYw+3YwQmAMAyF4UY6nRPohDqB6+k11UJF0j4Pf25WoR+8QIJ2Jm1N4vsBpOwftg4NsdjzzB/l8tUcfP3R/EIeAQAAAAAAkANuw6g9PKLL/AQetZ75cSyPQA4oemAflMHqMui8EdWqbHR5BAAAAAAAQA5gI5JHIAd82ohq/31CAO82othGlUcAAAAAAADkgH9tRIqSRwDgAnQaEaR5cS7eAAAAJXRFWHRkYXRlOmNyZWF0ZQAyMDIyLTA0LTEyVDIyOjAxOjUwKzAyOjAwR7uQhwAAACV0RVh0ZGF0ZTptb2RpZnkAMjAyMi0wNC0xMlQyMjowMTo1MCswMjowMDbmKDsAAAAASUVORK5CYII=&#34;&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
length_lure&lt;br /&gt;
[factor]
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
1. moyen&lt;br /&gt;
2. petit
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
\32 (56.1%)&lt;br /&gt;
\25 (43.9%)
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;img style=&#34;border:none;background-color:transparent;padding:0;max-width:max-content;&#34; src=&#34;data:image/png;base64,%20iVBORw0KGgoAAAANSUhEUgAAAEsAAAAqCAQAAABR726eAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAAAmJLR0QA/4ePzL8AAAAHdElNRQfmBAwWATJ6+PREAAAAf0lEQVRYw+3WSwqAMAyE4UQ8nSfQE+oJej3dRkGoD5op/LMrlPLRZDG+m2KGbACs7xnjYU1dtMVvWGZTGqqcTqJDhAULlkJgwYKlkEuDKO9e+T0eK1Zurw91q4shbg2+a/aaW43bae3uig4RFixYCoEFC5ZCeminOhEdIqwnOQCHOAvHb8r6gAAAACV0RVh0ZGF0ZTpjcmVhdGUAMjAyMi0wNC0xMlQyMjowMTo1MCswMjowMEe7kIcAAAAldEVYdGRhdGU6bW9kaWZ5ADIwMjItMDQtMTJUMjI6MDE6NTArMDI6MDA25ig7AAAAAElFTkSuQmCC&#34;&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;After cleaning and rearranging the data (code hidden below), we are ready to explore
graphically our data !&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Compute mean conditions (between beg and end session) 

mean_weather_cond &amp;lt;- session_data %&amp;gt;% 
group_by(Session) %&amp;gt;% 
select(-c(Long, Lat, Water_level, Tide_time)) %&amp;gt;% 
summarise_if(is.numeric, mean) 


# Extract fixed conditions and comments + join with mean cond 

fixed_cond_com &amp;lt;- session_data %&amp;gt;% 
group_by(Session) %&amp;gt;% 
select(Session, Comments, Long, Lat, Weather) %&amp;gt;% 
mutate(Comments_parsed = paste(na.omit(Comments), collapse = &amp;quot;&amp;quot;)) %&amp;gt;% 
select(-Comments) %&amp;gt;% 
slice(1) %&amp;gt;% 
inner_join(mean_weather_cond, by = &amp;quot;Session&amp;quot;)

# Create end and beg variables for WL, Time , Tide_time, Tide_status

beg_end_vars &amp;lt;- session_data %&amp;gt;% 
select(Session, Status, Water_level, Time, Tide_time, Tide_status) %&amp;gt;% 
pivot_wider(names_from = Status,
values_from = c(Time, Water_level,  Tide_time, Tide_status))


# Assemble both file and calculate duration

dat_ses &amp;lt;-  inner_join(beg_end_vars,
fixed_cond_com,
by = &amp;quot;Session&amp;quot;)

# Calculate duration of the sessions

dat_ses %&amp;lt;&amp;gt;% 
mutate(duration = round(difftime(Time_end,  Time_beg,  units = &amp;quot;hours&amp;quot;),
digits = 1))

catch_cond &amp;lt;- full_join(dat_ses,
catch_data, by = c( &amp;quot;Session&amp;quot; = &amp;quot;n_ses&amp;quot; )) %&amp;gt;% 
mutate(Session = factor(Session, levels = 1:length(dat_ses$Session)))

catch_cond %&amp;lt;&amp;gt;%
mutate(Tide_status_ses = paste0(Tide_status_beg, &amp;quot;_&amp;quot;, Tide_status_end))

# Simplify the Tide status variable

catch_cond$Tide_status_ses &amp;lt;- sapply(catch_cond$Tide_status_ses , function(x){switch(x, 
&amp;quot;Up_Dead&amp;quot; = &amp;quot;Up&amp;quot;,
&amp;quot;Up_Up&amp;quot; = &amp;quot;Up&amp;quot;,
&amp;quot;Up_Down&amp;quot; = &amp;quot;Dead&amp;quot;,
&amp;quot;Down_Dead&amp;quot; = &amp;quot;Down&amp;quot;,
&amp;quot;Down_Up&amp;quot; = &amp;quot;Dead&amp;quot;,
&amp;quot;Down_Down&amp;quot;  = &amp;quot;Down&amp;quot;,
&amp;quot;Dead_Dead&amp;quot; = &amp;quot;Dead&amp;quot;,
&amp;quot;Dead_Up&amp;quot; = &amp;quot;Up&amp;quot;,
&amp;quot;Dead_Down&amp;quot; = &amp;quot;Down&amp;quot;
)}, USE.NAMES = F)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;graphical-exploration&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Graphical exploration&lt;/h2&gt;
&lt;div id=&#34;where-did-i-fish&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Where did I fish ?&lt;/h3&gt;
&lt;p&gt;We can visualize the locations I fished the most by using the &lt;em&gt;leaflet&lt;/em&gt; package:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Calculate the number of fish caught by session 
fish_number &amp;lt;-  catch_cond  %&amp;gt;% na.omit() %&amp;gt;% group_by(Session) %&amp;gt;%  summarise(nb = length(Session))

# Dataframe with variables we want to show on the map
map_data &amp;lt;- catch_cond %&amp;gt;% 
group_by(Session) %&amp;gt;%
select(Session, Time_beg, Time_end, Long,
Lat, Water_level_beg, Tide_status_beg, Tide_time_beg, duration) 

map_data &amp;lt;- full_join(map_data, fish_number)

map_data$nb[is.na(map_data$nb)] &amp;lt;- 0

# Interactive map with Popup for each session
library(leaflet)

leaflet(map_data, width = &amp;quot;100%&amp;quot;) %&amp;gt;% addTiles() %&amp;gt;%
addPopups(lng = ~Long, lat = ~Lat, 
with(map_data, sprintf(&amp;quot;&amp;lt;b&amp;gt;Session %.0f : %.1f h&amp;lt;/b&amp;gt; &amp;lt;br/&amp;gt; %s &amp;lt;br/&amp;gt; %.0f  fish &amp;lt;br/&amp;gt; Water level: %.0f m, %s, %.0f min since last peak&amp;quot;,                                         Session, duration,  Time_beg, nb, Water_level_beg, Tide_status_beg, Tide_time_beg)), 
options = popupOptions(maxWidth = 100, minWidth = 50))&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:100%;height:480px;&#34; class=&#34;leaflet html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;options&#34;:{&#34;crs&#34;:{&#34;crsClass&#34;:&#34;L.CRS.EPSG3857&#34;,&#34;code&#34;:null,&#34;proj4def&#34;:null,&#34;projectedBounds&#34;:null,&#34;options&#34;:{}}},&#34;calls&#34;:[{&#34;method&#34;:&#34;addTiles&#34;,&#34;args&#34;:[&#34;https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&#34;,null,null,{&#34;minZoom&#34;:0,&#34;maxZoom&#34;:18,&#34;tileSize&#34;:256,&#34;subdomains&#34;:&#34;abc&#34;,&#34;errorTileUrl&#34;:&#34;&#34;,&#34;tms&#34;:false,&#34;noWrap&#34;:false,&#34;zoomOffset&#34;:0,&#34;zoomReverse&#34;:false,&#34;opacity&#34;:1,&#34;zIndex&#34;:1,&#34;detectRetina&#34;:false,&#34;attribution&#34;:&#34;&amp;copy; &lt;a href=\&#34;https://openstreetmap.org\&#34;&gt;OpenStreetMap&lt;\/a&gt; contributors, &lt;a href=\&#34;https://creativecommons.org/licenses/by-sa/2.0/\&#34;&gt;CC-BY-SA&lt;\/a&gt;&#34;}]},{&#34;method&#34;:&#34;addPopups&#34;,&#34;args&#34;:[[43.4903501,43.4903501,43.4903501,43.4948349,43.4948349,43.4948349,43.4948349,43.4948349,43.4929536,43.4929536,43.4717306,43.4856133,43.4856133,43.4898314,43.4879548,43.4891374,43.4888454,43.4903375,43.4907003,43.4883211,43.4870525,43.4882129,43.4902466,43.4879819,43.4879819,43.489656,43.4667765,43.4854263,43.4888221,43.4884741,43.4854276,43.4854276,43.4854276,43.490646,43.490646,43.490646,43.4884784,43.4891888,43.4885291,43.4885291,43.4849954,43.4849954,43.4849954,43.4853693,43.4865331,43.4853571,43.4881548,43.4865984,43.4895741,43.4831239,43.4831239,43.4831239,43.4831239,43.4831239,43.4831239,43.4831239,43.484568,43.484568,43.484568,43.484568,43.484568,43.4893757,43.4893757,43.4893757,43.4893757,43.4893757,43.4893757,43.4893757,43.4893757,43.4893757,43.4893757,43.4893757,43.4893757,43.4850086,43.4850086,43.4850086,43.488591],[-1.474845,-1.474845,-1.474845,-1.4702738,-1.4702738,-1.4702738,-1.4702738,-1.4702738,-1.4727054,-1.4727054,-1.4726262,-1.4762295,-1.4762295,-1.4645089,-1.4741375,-1.4619148,-1.4750443,-1.4523802,-1.471115,-1.4737693,-1.4741375,-1.4648611,-1.4522513,-1.4720217,-1.4720217,-1.4784552,-1.4835086,-1.4752964,-1.4768579,-1.4752235,-1.4752846,-1.4752846,-1.4752846,-1.4753465,-1.4753465,-1.4753465,-1.4801831,-1.4717195,-1.4740189,-1.4740189,-1.5000672,-1.5000672,-1.5000672,-1.4762834,-1.4757226,-1.4762743,-1.4748271,-1.4754897,-1.4745318,-1.4726297,-1.4726297,-1.4726297,-1.4726297,-1.4726297,-1.4726297,-1.4726297,-1.4745762,-1.4745762,-1.4745762,-1.4745762,-1.4745762,-1.474431,-1.474431,-1.474431,-1.474431,-1.474431,-1.474431,-1.474431,-1.474431,-1.474431,-1.474431,-1.474431,-1.474431,-1.4765871,-1.4765871,-1.4765871,-1.4750231],[&#34;&lt;b&gt;Session 1 : 0.9 h&lt;\/b&gt; &lt;br/&gt; 2019-04-09 19:23:09 &lt;br/&gt; 3  fish &lt;br/&gt; Water level: 4 m, Up, 340 min since last peak&#34;,&#34;&lt;b&gt;Session 1 : 0.9 h&lt;\/b&gt; &lt;br/&gt; 2019-04-09 19:23:09 &lt;br/&gt; 3  fish &lt;br/&gt; Water level: 4 m, Up, 340 min since last peak&#34;,&#34;&lt;b&gt;Session 1 : 0.9 h&lt;\/b&gt; &lt;br/&gt; 2019-04-09 19:23:09 &lt;br/&gt; 3  fish &lt;br/&gt; Water level: 4 m, Up, 340 min since last peak&#34;,&#34;&lt;b&gt;Session 2 : 2.1 h&lt;\/b&gt; &lt;br/&gt; 2019-04-10 18:23:40 &lt;br/&gt; 5  fish &lt;br/&gt; Water level: 3 m, Up, 240 min since last peak&#34;,&#34;&lt;b&gt;Session 2 : 2.1 h&lt;\/b&gt; &lt;br/&gt; 2019-04-10 18:23:40 &lt;br/&gt; 5  fish &lt;br/&gt; Water level: 3 m, Up, 240 min since last peak&#34;,&#34;&lt;b&gt;Session 2 : 2.1 h&lt;\/b&gt; &lt;br/&gt; 2019-04-10 18:23:40 &lt;br/&gt; 5  fish &lt;br/&gt; Water level: 3 m, Up, 240 min since last peak&#34;,&#34;&lt;b&gt;Session 2 : 2.1 h&lt;\/b&gt; &lt;br/&gt; 2019-04-10 18:23:40 &lt;br/&gt; 5  fish &lt;br/&gt; Water level: 3 m, Up, 240 min since last peak&#34;,&#34;&lt;b&gt;Session 2 : 2.1 h&lt;\/b&gt; &lt;br/&gt; 2019-04-10 18:23:40 &lt;br/&gt; 5  fish &lt;br/&gt; Water level: 3 m, Up, 240 min since last peak&#34;,&#34;&lt;b&gt;Session 3 : 2.3 h&lt;\/b&gt; &lt;br/&gt; 2019-04-17 20:45:27 &lt;br/&gt; 2  fish &lt;br/&gt; Water level: 1 m, Down, 305 min since last peak&#34;,&#34;&lt;b&gt;Session 3 : 2.3 h&lt;\/b&gt; &lt;br/&gt; 2019-04-17 20:45:27 &lt;br/&gt; 2  fish &lt;br/&gt; Water level: 1 m, Down, 305 min since last peak&#34;,&#34;&lt;b&gt;Session 4 : 0.8 h&lt;\/b&gt; &lt;br/&gt; 2019-04-21 17:58:26 &lt;br/&gt; 0  fish &lt;br/&gt; Water level: 4 m, Up, 320 min since last peak&#34;,&#34;&lt;b&gt;Session 5 : 2.0 h&lt;\/b&gt; &lt;br/&gt; 2019-04-22 18:18:23 &lt;br/&gt; 2  fish &lt;br/&gt; Water level: 4 m, Up, 305 min since last peak&#34;,&#34;&lt;b&gt;Session 5 : 2.0 h&lt;\/b&gt; &lt;br/&gt; 2019-04-22 18:18:23 &lt;br/&gt; 2  fish &lt;br/&gt; Water level: 4 m, Up, 305 min since last peak&#34;,&#34;&lt;b&gt;Session 6 : 1.0 h&lt;\/b&gt; &lt;br/&gt; 2019-04-26 18:30:25 &lt;br/&gt; 0  fish &lt;br/&gt; Water level: 2 m, Up, 110 min since last peak&#34;,&#34;&lt;b&gt;Session 7 : 0.6 h&lt;\/b&gt; &lt;br/&gt; 2019-05-06 18:38:02 &lt;br/&gt; 0  fish &lt;br/&gt; Water level: 4 m, Dead, 15 min since last peak&#34;,&#34;&lt;b&gt;Session 8 : 0.8 h&lt;\/b&gt; &lt;br/&gt; 2019-05-10 19:37:30 &lt;br/&gt; 0  fish &lt;br/&gt; Water level: 3 m, Up, 265 min since last peak&#34;,&#34;&lt;b&gt;Session 9 : 1.6 h&lt;\/b&gt; &lt;br/&gt; 2019-05-10 20:23:30 &lt;br/&gt; 1  fish &lt;br/&gt; Water level: 4 m, Up, 315 min since last peak&#34;,&#34;&lt;b&gt;Session 10 : 1.0 h&lt;\/b&gt; &lt;br/&gt; 2019-05-16 16:08:35 &lt;br/&gt; 0  fish &lt;br/&gt; Water level: 4 m, Dead, 30 min since last peak&#34;,&#34;&lt;b&gt;Session 11 : 0.9 h&lt;\/b&gt; &lt;br/&gt; 2019-05-21 19:18:50 &lt;br/&gt; 0  fish &lt;br/&gt; Water level: 4 m, Dead, 15 min since last peak&#34;,&#34;&lt;b&gt;Session 12 : 0.6 h&lt;\/b&gt; &lt;br/&gt; 2019-05-23 19:45:32 &lt;br/&gt; 0  fish &lt;br/&gt; Water level: 4 m, Up, 330 min since last peak&#34;,&#34;&lt;b&gt;Session 13 : 2.2 h&lt;\/b&gt; &lt;br/&gt; 2019-05-29 18:50:42 &lt;br/&gt; 1  fish &lt;br/&gt; Water level: 2 m, Down, 290 min since last peak&#34;,&#34;&lt;b&gt;Session 14 : 1.6 h&lt;\/b&gt; &lt;br/&gt; 2019-05-30 13:27:48 &lt;br/&gt; 0  fish &lt;br/&gt; Water level: 3 m, Up, 295 min since last peak&#34;,&#34;&lt;b&gt;Session 15 : 0.9 h&lt;\/b&gt; &lt;br/&gt; 2019-06-01 15:28:24 &lt;br/&gt; 0  fish &lt;br/&gt; Water level: 4 m, Up, 335 min since last peak&#34;,&#34;&lt;b&gt;Session 16 : 0.8 h&lt;\/b&gt; &lt;br/&gt; 2019-06-01 21:28:06 &lt;br/&gt; 2  fish &lt;br/&gt; Water level: 1 m, Down, 325 min since last peak&#34;,&#34;&lt;b&gt;Session 16 : 0.8 h&lt;\/b&gt; &lt;br/&gt; 2019-06-01 21:28:06 &lt;br/&gt; 2  fish &lt;br/&gt; Water level: 1 m, Down, 325 min since last peak&#34;,&#34;&lt;b&gt;Session 17 : 1.2 h&lt;\/b&gt; &lt;br/&gt; 2019-06-02 14:26:22 &lt;br/&gt; 0  fish &lt;br/&gt; Water level: 3 m, Up, 235 min since last peak&#34;,&#34;&lt;b&gt;Session 18 : 1.0 h&lt;\/b&gt; &lt;br/&gt; 2019-06-07 19:20:32 &lt;br/&gt; 0  fish &lt;br/&gt; Water level: 4 m, Up, 315 min since last peak&#34;,&#34;&lt;b&gt;Session 19 : 1.6 h&lt;\/b&gt; &lt;br/&gt; 2019-06-19 18:13:14 &lt;br/&gt; 0  fish &lt;br/&gt; Water level: 4 m, Up, 340 min since last peak&#34;,&#34;&lt;b&gt;Session 20 : 1.1 h&lt;\/b&gt; &lt;br/&gt; 2019-06-22 20:38:02 &lt;br/&gt; 0  fish &lt;br/&gt; Water level: 4 m, Dead, 370 min since last peak&#34;,&#34;&lt;b&gt;Session 21 : 0.8 h&lt;\/b&gt; &lt;br/&gt; 2019-06-26 20:13:34 &lt;br/&gt; 1  fish &lt;br/&gt; Water level: 2 m, Up, 115 min since last peak&#34;,&#34;&lt;b&gt;Session 22 : 0.2 h&lt;\/b&gt; &lt;br/&gt; 2019-06-27 20:05:43 &lt;br/&gt; 3  fish &lt;br/&gt; Water level: 2 m, Up, 45 min since last peak&#34;,&#34;&lt;b&gt;Session 22 : 0.2 h&lt;\/b&gt; &lt;br/&gt; 2019-06-27 20:05:43 &lt;br/&gt; 3  fish &lt;br/&gt; Water level: 2 m, Up, 45 min since last peak&#34;,&#34;&lt;b&gt;Session 22 : 0.2 h&lt;\/b&gt; &lt;br/&gt; 2019-06-27 20:05:43 &lt;br/&gt; 3  fish &lt;br/&gt; Water level: 2 m, Up, 45 min since last peak&#34;,&#34;&lt;b&gt;Session 23 : 3.3 h&lt;\/b&gt; &lt;br/&gt; 2019-06-28 18:55:31 &lt;br/&gt; 3  fish &lt;br/&gt; Water level: 2 m, Down, 295 min since last peak&#34;,&#34;&lt;b&gt;Session 23 : 3.3 h&lt;\/b&gt; &lt;br/&gt; 2019-06-28 18:55:31 &lt;br/&gt; 3  fish &lt;br/&gt; Water level: 2 m, Down, 295 min since last peak&#34;,&#34;&lt;b&gt;Session 23 : 3.3 h&lt;\/b&gt; &lt;br/&gt; 2019-06-28 18:55:31 &lt;br/&gt; 3  fish &lt;br/&gt; Water level: 2 m, Down, 295 min since last peak&#34;,&#34;&lt;b&gt;Session 24 : 1.4 h&lt;\/b&gt; &lt;br/&gt; 2019-07-13 19:06:20 &lt;br/&gt; 0  fish &lt;br/&gt; Water level: 2 m, Down, 250 min since last peak&#34;,&#34;&lt;b&gt;Session 25 : 0.2 h&lt;\/b&gt; &lt;br/&gt; 2019-08-13 21:35:09 &lt;br/&gt; 0  fish &lt;br/&gt; Water level: 1 m, Down, 310 min since last peak&#34;,&#34;&lt;b&gt;Session 26 : 1.3 h&lt;\/b&gt; &lt;br/&gt; 2020-05-20 20:47:38 &lt;br/&gt; 2  fish &lt;br/&gt; Water level: 2 m, Down, 270 min since last peak&#34;,&#34;&lt;b&gt;Session 26 : 1.3 h&lt;\/b&gt; &lt;br/&gt; 2020-05-20 20:47:38 &lt;br/&gt; 2  fish &lt;br/&gt; Water level: 2 m, Down, 270 min since last peak&#34;,&#34;&lt;b&gt;Session 27 : 0.0 h&lt;\/b&gt; &lt;br/&gt; 2020-05-22 22:51:04 &lt;br/&gt; 3  fish &lt;br/&gt; Water level: 1 m, Down, 325 min since last peak&#34;,&#34;&lt;b&gt;Session 27 : 0.0 h&lt;\/b&gt; &lt;br/&gt; 2020-05-22 22:51:04 &lt;br/&gt; 3  fish &lt;br/&gt; Water level: 1 m, Down, 325 min since last peak&#34;,&#34;&lt;b&gt;Session 27 : 0.0 h&lt;\/b&gt; &lt;br/&gt; 2020-05-22 22:51:04 &lt;br/&gt; 3  fish &lt;br/&gt; Water level: 1 m, Down, 325 min since last peak&#34;,&#34;&lt;b&gt;Session 28 : 1.4 h&lt;\/b&gt; &lt;br/&gt; 2020-05-25 20:44:09 &lt;br/&gt; 1  fish &lt;br/&gt; Water level: 4 m, Down, 110 min since last peak&#34;,&#34;&lt;b&gt;Session 29 : 1.2 h&lt;\/b&gt; &lt;br/&gt; 2020-05-26 21:22:28 &lt;br/&gt; 0  fish &lt;br/&gt; Water level: 4 m, Down, 95 min since last peak&#34;,&#34;&lt;b&gt;Session 30 : 1.3 h&lt;\/b&gt; &lt;br/&gt; 2020-06-01 20:55:54 &lt;br/&gt; 1  fish &lt;br/&gt; Water level: 2 m, Up, 70 min since last peak&#34;,&#34;&lt;b&gt;Session 31 : 2.3 h&lt;\/b&gt; &lt;br/&gt; 2020-06-08 19:56:35 &lt;br/&gt; 0  fish &lt;br/&gt; Water level: 4 m, Down, 40 min since last peak&#34;,&#34;&lt;b&gt;Session 32 : 2.0 h&lt;\/b&gt; &lt;br/&gt; 2020-06-15 20:30:55 &lt;br/&gt; 0  fish &lt;br/&gt; Water level: 2 m, Up, 50 min since last peak&#34;,&#34;&lt;b&gt;Session 33 : 1.1 h&lt;\/b&gt; &lt;br/&gt; 2020-06-30 20:59:48 &lt;br/&gt; 0  fish &lt;br/&gt; Water level: 2 m, Up, 105 min since last peak&#34;,&#34;&lt;b&gt;Session 34 : 2.5 h&lt;\/b&gt; &lt;br/&gt; 2020-07-16 21:58:40 &lt;br/&gt; 0  fish &lt;br/&gt; Water level: 2 m, Up, 80 min since last peak&#34;,&#34;&lt;b&gt;Session 34 : 2.5 h&lt;\/b&gt; &lt;br/&gt; 2020-07-16 21:58:40 &lt;br/&gt; 0  fish &lt;br/&gt; Water level: 2 m, Up, 80 min since last peak&#34;,&#34;&lt;b&gt;Session 34 : 2.5 h&lt;\/b&gt; &lt;br/&gt; 2020-07-16 21:58:40 &lt;br/&gt; 0  fish &lt;br/&gt; Water level: 2 m, Up, 80 min since last peak&#34;,&#34;&lt;b&gt;Session 34 : 2.5 h&lt;\/b&gt; &lt;br/&gt; 2020-07-16 21:58:40 &lt;br/&gt; 0  fish &lt;br/&gt; Water level: 2 m, Up, 80 min since last peak&#34;,&#34;&lt;b&gt;Session 34 : 2.5 h&lt;\/b&gt; &lt;br/&gt; 2020-07-16 21:58:40 &lt;br/&gt; 0  fish &lt;br/&gt; Water level: 2 m, Up, 80 min since last peak&#34;,&#34;&lt;b&gt;Session 34 : 2.5 h&lt;\/b&gt; &lt;br/&gt; 2020-07-16 21:58:40 &lt;br/&gt; 0  fish &lt;br/&gt; Water level: 2 m, Up, 80 min since last peak&#34;,&#34;&lt;b&gt;Session 34 : 2.5 h&lt;\/b&gt; &lt;br/&gt; 2020-07-16 21:58:40 &lt;br/&gt; 0  fish &lt;br/&gt; Water level: 2 m, Up, 80 min since last peak&#34;,&#34;&lt;b&gt;Session 35 : 2.6 h&lt;\/b&gt; &lt;br/&gt; 2020-07-17 21:51:40 &lt;br/&gt; 0  fish &lt;br/&gt; Water level: 2 m, Up, 20 min since last peak&#34;,&#34;&lt;b&gt;Session 35 : 2.6 h&lt;\/b&gt; &lt;br/&gt; 2020-07-17 21:51:40 &lt;br/&gt; 0  fish &lt;br/&gt; Water level: 2 m, Up, 20 min since last peak&#34;,&#34;&lt;b&gt;Session 35 : 2.6 h&lt;\/b&gt; &lt;br/&gt; 2020-07-17 21:51:40 &lt;br/&gt; 0  fish &lt;br/&gt; Water level: 2 m, Up, 20 min since last peak&#34;,&#34;&lt;b&gt;Session 35 : 2.6 h&lt;\/b&gt; &lt;br/&gt; 2020-07-17 21:51:40 &lt;br/&gt; 0  fish &lt;br/&gt; Water level: 2 m, Up, 20 min since last peak&#34;,&#34;&lt;b&gt;Session 35 : 2.6 h&lt;\/b&gt; &lt;br/&gt; 2020-07-17 21:51:40 &lt;br/&gt; 0  fish &lt;br/&gt; Water level: 2 m, Up, 20 min since last peak&#34;,&#34;&lt;b&gt;Session 36 : 1.5 h&lt;\/b&gt; &lt;br/&gt; 2020-07-18 23:25:07 &lt;br/&gt; 0  fish &lt;br/&gt; Water level: 2 m, Up, 80 min since last peak&#34;,&#34;&lt;b&gt;Session 36 : 1.5 h&lt;\/b&gt; &lt;br/&gt; 2020-07-18 23:25:07 &lt;br/&gt; 0  fish &lt;br/&gt; Water level: 2 m, Up, 80 min since last peak&#34;,&#34;&lt;b&gt;Session 36 : 1.5 h&lt;\/b&gt; &lt;br/&gt; 2020-07-18 23:25:07 &lt;br/&gt; 0  fish &lt;br/&gt; Water level: 2 m, Up, 80 min since last peak&#34;,&#34;&lt;b&gt;Session 36 : 1.5 h&lt;\/b&gt; &lt;br/&gt; 2020-07-18 23:25:07 &lt;br/&gt; 0  fish &lt;br/&gt; Water level: 2 m, Up, 80 min since last peak&#34;,&#34;&lt;b&gt;Session 36 : 1.5 h&lt;\/b&gt; &lt;br/&gt; 2020-07-18 23:25:07 &lt;br/&gt; 0  fish &lt;br/&gt; Water level: 2 m, Up, 80 min since last peak&#34;,&#34;&lt;b&gt;Session 36 : 1.5 h&lt;\/b&gt; &lt;br/&gt; 2020-07-18 23:25:07 &lt;br/&gt; 0  fish &lt;br/&gt; Water level: 2 m, Up, 80 min since last peak&#34;,&#34;&lt;b&gt;Session 36 : 1.5 h&lt;\/b&gt; &lt;br/&gt; 2020-07-18 23:25:07 &lt;br/&gt; 0  fish &lt;br/&gt; Water level: 2 m, Up, 80 min since last peak&#34;,&#34;&lt;b&gt;Session 36 : 1.5 h&lt;\/b&gt; &lt;br/&gt; 2020-07-18 23:25:07 &lt;br/&gt; 0  fish &lt;br/&gt; Water level: 2 m, Up, 80 min since last peak&#34;,&#34;&lt;b&gt;Session 36 : 1.5 h&lt;\/b&gt; &lt;br/&gt; 2020-07-18 23:25:07 &lt;br/&gt; 0  fish &lt;br/&gt; Water level: 2 m, Up, 80 min since last peak&#34;,&#34;&lt;b&gt;Session 36 : 1.5 h&lt;\/b&gt; &lt;br/&gt; 2020-07-18 23:25:07 &lt;br/&gt; 0  fish &lt;br/&gt; Water level: 2 m, Up, 80 min since last peak&#34;,&#34;&lt;b&gt;Session 36 : 1.5 h&lt;\/b&gt; &lt;br/&gt; 2020-07-18 23:25:07 &lt;br/&gt; 0  fish &lt;br/&gt; Water level: 2 m, Up, 80 min since last peak&#34;,&#34;&lt;b&gt;Session 36 : 1.5 h&lt;\/b&gt; &lt;br/&gt; 2020-07-18 23:25:07 &lt;br/&gt; 0  fish &lt;br/&gt; Water level: 2 m, Up, 80 min since last peak&#34;,&#34;&lt;b&gt;Session 37 : 1.6 h&lt;\/b&gt; &lt;br/&gt; 2020-09-04 20:50:17 &lt;br/&gt; 3  fish &lt;br/&gt; Water level: 3 m, Down, 125 min since last peak&#34;,&#34;&lt;b&gt;Session 37 : 1.6 h&lt;\/b&gt; &lt;br/&gt; 2020-09-04 20:50:17 &lt;br/&gt; 3  fish &lt;br/&gt; Water level: 3 m, Down, 125 min since last peak&#34;,&#34;&lt;b&gt;Session 37 : 1.6 h&lt;\/b&gt; &lt;br/&gt; 2020-09-04 20:50:17 &lt;br/&gt; 3  fish &lt;br/&gt; Water level: 3 m, Down, 125 min since last peak&#34;,&#34;&lt;b&gt;Session 38 : 0.6 h&lt;\/b&gt; &lt;br/&gt; 2020-09-13 21:33:41 &lt;br/&gt; 0  fish &lt;br/&gt; Water level: 2 m, Up, 50 min since last peak&#34;],null,null,{&#34;maxWidth&#34;:100,&#34;minWidth&#34;:50,&#34;autoPan&#34;:true,&#34;keepInView&#34;:false,&#34;closeButton&#34;:true,&#34;className&#34;:&#34;&#34;}]}],&#34;limits&#34;:{&#34;lat&#34;:[43.4667765,43.4948349],&#34;lng&#34;:[-1.5000672,-1.4522513]}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;As you see I fish mostly in the Nive river that is flowing through Bayonne city.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;when-it-is-best-to-fish&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;When it is best to fish ?&lt;/h3&gt;
&lt;div id=&#34;time-of-the-year&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Time of the year&lt;/h4&gt;
&lt;p&gt;The following graph shows the number of fish caught depending on the time of the year :&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;catch_cond %&amp;gt;% 
group_by(Session, Time_beg, .drop = F) %&amp;gt;% 
na.omit() %&amp;gt;% 
summarise(n_catch = n()) %&amp;gt;% 
right_join(unique(catch_cond[, c(&amp;quot;Session&amp;quot;, &amp;quot;Time_beg&amp;quot;)])) %&amp;gt;% 
mutate(n_catch = ifelse(is.na(n_catch), 0, n_catch )) %&amp;gt;%
ggplot(aes(y = n_catch, x =Time_beg)) +
geom_point( size = 2) + 
  theme_minimal() + labs(x = &amp;quot;Date&amp;quot;, y = &amp;quot;Number of catch&amp;quot;) + scale_x_datetime(date_labels = &amp;quot;%d/%m/%y&amp;quot;, date_breaks = &amp;quot;3 months&amp;quot;) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://aureliencallens.github.io/post/2020-09-25-ds-fishing-part2.en_files/figure-html/unnamed-chunk-5-1.svg&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;From this graph we see that I didn’t go fishing during the autumn and winter of 2019, I don’t have any data. Unfortunately for me, autumn is known to be a great period for sea bass fishing, I must go fishing this year to compensate the lack of data in this season. During winter, fishing is really complicated because the large majority of sea bass are returned to the ocean.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;time-of-the-day&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Time of the day&lt;/h4&gt;
&lt;p&gt;This graph shows the number of fish I catch depending on the hour of the day :&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;catch_cond %&amp;gt;% 
group_by(Session, Time_beg, .drop = F) %&amp;gt;% 
na.omit() %&amp;gt;% 
summarise(n_catch = n()) %&amp;gt;% 
right_join(unique(catch_cond[, c(&amp;quot;Session&amp;quot;, &amp;quot;Time_beg&amp;quot;)])) %&amp;gt;% 
mutate(n_catch = ifelse(is.na(n_catch), 0, n_catch ), 
hour = format(Time_beg, &amp;quot;%H&amp;quot;)) %&amp;gt;%
ggplot(aes(y = n_catch, x =hour)) +
geom_point( size = 2)  + labs(x = &amp;quot;Hour&amp;quot;, y = &amp;quot;Number of catch&amp;quot;)+
theme_minimal()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://aureliencallens.github.io/post/2020-09-25-ds-fishing-part2.en_files/figure-html/unnamed-chunk-6-1.svg&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;I mostly fish after work or during evenings. To draw relevant conclusions about the influence of the fishing hour, I have to go fishing at different hours of the day (in the morning for example).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;the-tide&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;The tide&lt;/h4&gt;
&lt;p&gt;The tide is an important parameter for fishing in estuaries. Let’s see the effect of the tide current on my catches:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggpubr)

gg1 &amp;lt;- catch_cond %&amp;gt;% 
  group_by(Session, Tide_status_ses, .drop = F)  %&amp;gt;%  
  drop_na() %&amp;gt;% 
  summarise(n_catch = n()) %&amp;gt;% 
  right_join(unique(catch_cond[, c(&amp;quot;Session&amp;quot;, &amp;quot;Tide_status_ses&amp;quot;)])) %&amp;gt;% 
  mutate(n_catch = ifelse(is.na(n_catch), 0, n_catch )) %&amp;gt;%
  ggplot(aes(y = n_catch, x = Tide_status_ses, fill = Tide_status_ses)) +
  geom_boxplot() +
  labs(x = &amp;quot;Status of tide current&amp;quot;, y = &amp;quot;Number of catch&amp;quot;) +
  theme_minimal()+ theme(legend.position=&amp;quot;None&amp;quot;)

gg2 &amp;lt;- catch_cond %&amp;gt;% 
  na.omit() %&amp;gt;% 
  ggplot(aes(y = length,x = Tide_status_ses, fill = Tide_status_ses)) +
  geom_boxplot()+
  labs(x = &amp;quot;Status of tide current&amp;quot;, y = &amp;quot;Length of the fish&amp;quot;) +
  theme_minimal()+ theme(legend.position=&amp;quot;None&amp;quot;)

ggarrange(gg1, gg2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://aureliencallens.github.io/post/2020-09-25-ds-fishing-part2.en_files/figure-html/unnamed-chunk-7-1.svg&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;It seems that the status of the tide current does not influence the number of my catch but influences the length of the fish. I tend to catch bigger fish when the current is going down.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;does-the-moon-affect-my-fishing-results&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Does the moon affect my fishing results?&lt;/h3&gt;
&lt;p&gt;A widespread belief among fishermen is that the moon influence greatly the behavior of the fish. Information about the moon phase were available thanks to the weather API, I decided to record this variable to investigate if the belief was true. The two graphs show the number and length of fish depending on the phase of moon (0 corresponding to new moon and 1 to full moon):&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gg3 &amp;lt;- catch_cond %&amp;gt;% 
  group_by(Session, Moon, .drop = F) %&amp;gt;%  
  na.omit() %&amp;gt;% 
  summarise(n_catch = n()) %&amp;gt;% 
  right_join(unique(catch_cond[, c(&amp;quot;Session&amp;quot;, &amp;quot;Moon&amp;quot;)])) %&amp;gt;% 
  mutate(n_catch = ifelse(is.na(n_catch), 0, n_catch )) %&amp;gt;% 
  ggplot(aes(y = n_catch, x = Moon)) +
  geom_point( size = 2) +
  labs(x = &amp;quot;Moon phase&amp;quot;, y = &amp;quot;Number of catch&amp;quot;)+
  theme_minimal()

gg4 &amp;lt;- catch_cond %&amp;gt;% 
  ggplot(aes(y = length, x = Moon)) +
  geom_point( size = 2) +
  geom_smooth(method=&amp;quot;lm&amp;quot;, se=T) + 
  labs(x = &amp;quot;Moon phase&amp;quot;, y = &amp;quot;Length of the fish&amp;quot;)+
  theme_minimal()

ggarrange(gg3, gg4)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://aureliencallens.github.io/post/2020-09-25-ds-fishing-part2.en_files/figure-html/unnamed-chunk-8-1.svg&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The phase of the moon does not seem to influence the number of fish I catch during a session. However, I tend to catch bigger fish the closer we are to the full moon. To confirm this observation, I need to keep going fishing to get more data !&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;does-the-weather-affect-my-fishing-results&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Does the weather affect my fishing results?&lt;/h3&gt;
&lt;p&gt;We can look at the number of fish caught during different weather conditions:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# precipitation probability 

gg5 &amp;lt;- catch_cond %&amp;gt;% 
  group_by(Session, Preci_prob, .drop = F) %&amp;gt;%  
  na.omit() %&amp;gt;% 
  summarise(n_catch = n()) %&amp;gt;% 
  right_join(unique(catch_cond[, c(&amp;quot;Session&amp;quot;, &amp;quot;Preci_prob&amp;quot;)])) %&amp;gt;% 
  mutate(n_catch = ifelse(is.na(n_catch), 0, n_catch )) %&amp;gt;% 
  ggplot(aes(y = n_catch, x = Preci_prob)) +
  geom_point()+
  labs(x = &amp;quot;Precipitation prob.&amp;quot;, y = &amp;quot;Number of catch&amp;quot;)+
  theme_minimal()

# Atm pressure 

gg6 &amp;lt;- catch_cond %&amp;gt;% 
  group_by(Session, Atm_pres, .drop = F) %&amp;gt;%  
  na.omit() %&amp;gt;% 
  summarise(n_catch = n()) %&amp;gt;% 
  right_join(unique(catch_cond[, c(&amp;quot;Session&amp;quot;, &amp;quot;Atm_pres&amp;quot;)])) %&amp;gt;% 
  mutate(n_catch = ifelse(is.na(n_catch), 0, n_catch )) %&amp;gt;% 
  ggplot(aes(y = n_catch, x = Atm_pres)) +
  geom_point() +
  labs(x = &amp;quot;Atm. pressure&amp;quot;, y = &amp;quot;Number of catch&amp;quot;)+
  theme_minimal()

#Air temp

gg7 &amp;lt;- catch_cond %&amp;gt;% 
  group_by(Session, Air_temp, .drop = F) %&amp;gt;%  
  na.omit() %&amp;gt;% 
  summarise(n_catch = n()) %&amp;gt;% 
  right_join(unique(catch_cond[, c(&amp;quot;Session&amp;quot;, &amp;quot;Air_temp&amp;quot;)])) %&amp;gt;% 
  mutate(n_catch = ifelse(is.na(n_catch), 0, n_catch )) %&amp;gt;% 
  ggplot(aes(y = n_catch, x = Air_temp)) +
  geom_point() +
  labs(x = &amp;quot;Air temp.&amp;quot;, y = &amp;quot;Number of catch&amp;quot;)+
  theme_minimal()


#Cloud cover

gg8 &amp;lt;- catch_cond %&amp;gt;% 
  group_by(Session, Cloud_cover, .drop = F) %&amp;gt;%  
  na.omit() %&amp;gt;% 
  summarise(n_catch = n()) %&amp;gt;% 
  right_join(unique(catch_cond[, c(&amp;quot;Session&amp;quot;, &amp;quot;Cloud_cover&amp;quot;)])) %&amp;gt;% 
  mutate(n_catch = ifelse(is.na(n_catch), 0, n_catch )) %&amp;gt;% 
  ggplot(aes(y = n_catch, x = Cloud_cover)) +
  geom_point() +
  labs(x = &amp;quot;Cloud cover&amp;quot;, y = &amp;quot;Number of catchh&amp;quot;)+
  theme_minimal()

ggarrange(gg5, gg6, gg7, gg8)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://aureliencallens.github.io/post/2020-09-25-ds-fishing-part2.en_files/figure-html/unnamed-chunk-9-1.svg&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;And to their length :&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gg15 &amp;lt;- catch_cond %&amp;gt;% 
  ggplot(aes(y = length, x = Preci_prob)) +
  geom_point( size = 2) +
  labs( y = &amp;quot;Length of the fish&amp;quot;)+
  theme_minimal()

gg16 &amp;lt;- catch_cond %&amp;gt;% 
  ggplot(aes(y = length, x = Atm_pres)) +
  geom_point( size = 2) +
  labs( y = &amp;quot;Length of the fish&amp;quot;)+
  theme_minimal()

gg17 &amp;lt;- catch_cond %&amp;gt;% 
  ggplot(aes(y = length, x = Air_temp)) +
  geom_point( size = 2) +
  labs( y = &amp;quot;Length of the fish&amp;quot;)+
  theme_minimal()


gg18  &amp;lt;- catch_cond %&amp;gt;% 
  ggplot(aes(y = length, x = Cloud_cover)) +
  geom_point( size = 2) +
  labs( y = &amp;quot;Length of the fish&amp;quot;)+
  theme_minimal()

ggarrange(gg15, gg16, gg17, gg18)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://aureliencallens.github.io/post/2020-09-25-ds-fishing-part2.en_files/figure-html/unnamed-chunk-10-1.svg&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Because we have limited data and not all weather conditions are covered, it is difficult to draw any conclusions.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;what-are-the-best-lures-to-catch-fish&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;What are the best lures to catch fish ?&lt;/h3&gt;
&lt;p&gt;Each time I catch a fish, I fill a form with my shiny application in order to record the characteristics of the lure used. There are different types of lures that have specific swimming patterns, different colors and size. We can represent the number of fish caught depending on the lure characteristics:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;levels(catch_cond$colour) &amp;lt;- c(&amp;quot;clear&amp;quot;, &amp;quot;natural&amp;quot;, &amp;quot;dark&amp;quot;)
levels(catch_cond$length_lure) &amp;lt;- c(&amp;quot;medium&amp;quot;, &amp;quot;small&amp;quot;)

gg9 &amp;lt;- catch_cond %&amp;gt;% 
  na.omit() %&amp;gt;% 
  ggplot( aes(x=lure, fill = lure)) +
  geom_bar(stat=&amp;quot;count&amp;quot;, width=0.7)+
  labs(x = &amp;quot;Type of lure&amp;quot;, y = &amp;quot;&amp;quot;)+
  theme_minimal()+ 
  theme(legend.position=&amp;quot;None&amp;quot;)

gg10 &amp;lt;- catch_cond %&amp;gt;% 
  na.omit() %&amp;gt;% 
  ggplot( aes(x=colour, fill = colour)) +
  geom_bar(stat=&amp;quot;count&amp;quot;, width=0.7)+
  labs(x = &amp;quot;Color of the lures&amp;quot;, y = &amp;quot;&amp;quot;)+
  theme_minimal()+
    scale_fill_brewer(palette=&amp;quot;BuPu&amp;quot;)+ 
  theme(legend.position=&amp;quot;None&amp;quot;)

gg11 &amp;lt;- catch_cond %&amp;gt;% 
  na.omit() %&amp;gt;%
  ggplot( aes(x=length_lure, fill = length_lure)) +
  geom_bar(stat=&amp;quot;count&amp;quot;, width=0.7)+
  labs(x = &amp;quot;Size of the lure&amp;quot;, y = &amp;quot;&amp;quot;)+
    scale_fill_brewer(palette=&amp;quot;Dark2&amp;quot;)+
  theme_minimal()+ theme(legend.position=&amp;quot;None&amp;quot;)

annotate_figure(ggarrange(gg9, gg10, gg11, ncol = 3),
                left = text_grob(&amp;quot;Number of catch&amp;quot;, rot = 90)
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://aureliencallens.github.io/post/2020-09-25-ds-fishing-part2.en_files/figure-html/unnamed-chunk-11-1.svg&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can do the same for the length of fish caught:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gg12 &amp;lt;-catch_cond %&amp;gt;% 
  na.omit() %&amp;gt;% 
  ggplot(aes(y = length, x = lure, fill=lure)) +
  geom_boxplot()+
  labs(x = &amp;quot;Type of lure&amp;quot;, y = &amp;quot;&amp;quot;)+
  theme_minimal()+ theme(legend.position=&amp;quot;None&amp;quot;)

gg13 &amp;lt;-catch_cond %&amp;gt;% 
  na.omit() %&amp;gt;%
  ggplot(aes(y = length, x = colour, fill= colour)) +
  geom_boxplot()+
  labs(x = &amp;quot;Color of the lures&amp;quot;, y = &amp;quot;&amp;quot;)+
  theme_minimal()+
    scale_fill_brewer(palette=&amp;quot;BuPu&amp;quot;)+ theme(legend.position=&amp;quot;None&amp;quot;)

gg14 &amp;lt;-catch_cond %&amp;gt;% 
  na.omit() %&amp;gt;%
  ggplot(aes(y = length, x = length_lure, fill=length_lure)) +
  geom_boxplot()+
  labs(x = &amp;quot;Size of the lure&amp;quot;, y = &amp;quot;&amp;quot;)+
  theme_minimal()+
    scale_fill_brewer(palette=&amp;quot;Dark2&amp;quot;)+ theme(legend.position=&amp;quot;None&amp;quot;)

annotate_figure(ggarrange(gg12, gg13, gg14, ncol = 3),
                left = text_grob(&amp;quot;Length of fish&amp;quot;, rot = 90)
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://aureliencallens.github.io/post/2020-09-25-ds-fishing-part2.en_files/figure-html/unnamed-chunk-12-1.svg&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;With these 6 graphs, we can see that the most successful types of lures for me are the shad and slug types. An honorable mention is the jerkbait type : it only accounts for 2 fish, but 2 big fish (median around 47cm). The colors that worked best for me were clear and natural. For the size of the lure, bigger lures tend to catch bigger fish in average. These conclusions must be taken with a grain of salt because we do not know the time spent with each lure before catching a fish. In addition, I tend to use the same types and colors of lures (habits), I should vary more.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusion&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Analyzing my fishing data was very interesting and it brought me some insights on my fishing style! I understood that I was fishing almost the same way with the same habits. Although it seems to be working for me, I have a biased view on how to catch European sea bass. I must use bigger lures to catch bigger fish and I must vary the types of lures used. Indeed, I fish most of the times with slug or shad lures, hence the higher number of fish caught with these types of lures.&lt;/p&gt;
&lt;p&gt;I will keep using the application to gather more data and have a better understanding on my fishing session. I will keep you updated on the results ! 😉&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
